(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    207033,       4405]
NotebookOptionsPosition[    198377,       4097]
NotebookOutlinePosition[    198956,       4119]
CellTagsIndexPosition[    198913,       4116]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 StyleBox["HW 9 - ASTR540\n",
  FontFamily->"Arial",
  FontSize->56,
  FontWeight->"Bold"],
 StyleBox["Created with Wolfram Mathematica 11.1 on November 18, 2016",
  FontFamily->"Arial",
  FontSize->10,
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[1, 0.5, 0]]
}], "Title"],

Cell[TextData[{
 StyleBox["Daniel George - ",
  FontSize->18],
 StyleBox[ButtonBox["dgeorge5@illinois.edu\n",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["mailto:dgeorge5@illinois.edu"], None},
  ButtonNote->"mailto:dgeorge5@illinois.edu"],
  FontSize->18,
  FontColor->RGBColor[0., 0., 0.6078431372549019]]
}], "Chapter"],

Cell[CellGroupData[{

Cell["Q1)", "Chapter"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsnXV4Fcf3/1OBQEhCIAQNEIK7JsUpTpBixaW4lWLFrRQpxSmlOG2hSHAJ
wSnuFIKFoMECxIgT+uHK7/zuefY8585uAqVAab/n9cd99s7Ozs7Ozs7svOfs
mXzdBrbo9aGDg8PX6eCnRdcRNYcM6TqqpRv8aTXg6769B/Ts4TdgaM/ePYdU
7PYRBH4PP5sdHRz+/7ZVEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEAThzWGxWP7p
LLwvSFG8HlJugiAIgiAIgiAIgiAIgiAIwn8J0b0FQRAEQRAEQRAEQRAEQRDe
EiLACoIgCIIgCIIgCIIgCIIgCILwZrHY81ePeqt5EwRBEARBEARBEARBEARB
+HfxXmmn70lOLDr+8Ty8+wy8Bv+WfAqCIAiCIAiCIAiCIAiC8FZ537TN90Hy
tWoKKvyabVBO3n1+8NRme/6RwqGTUh6UXe8yM6/Ce1KXBEEQBEEQBEEQBEEQ
BEH4xyFt832QDRXV95/KEpd8TTYMM/Nu8qNkQ6+Hv4M8UE4UTV7RxvWl9M7y
lnqG358sCYIgCIIgCIIgCIIgCILwj6DXNv8pq2O90Mrz8y6zRCcymUwvbOhV
6HeTH5LBIQ/6DLxj8Vm5QbxM9EK9fvrg7WXsFTMsYrggCIIgCIIgCIIgCIIg
pMK7l864XvcOhFY9KGxadBim8NJTvEocQ+lbL7rCBh5i1rxzWJgbE8Nklfhm
e7cemKA+GinPGIcCMSf/+9//uDrNy4Enpb985bZSZLoufQq4F/Pw559/mhiQ
AQjEX4tm/EylhKfgKetPoWSbSsPwruHUAF4yFgVFxszAXygZ3MWhODypdzOj
oRft9dMHyiFvO1d/lfcwS4IgCIIgCIIgCIIgCMJ/kn9QCX+rVqwW5nYDpULa
QEPoVGTDV7H1VRRgvSZsqEOS6ktxuAwOoNbKrY5TOpzgIjnpsajcWo20YoxP
Yi+WBmrOCJUeF8OTk5P//PNPpZQUjV2Rza1MMDfMMF4Lnp0KAUoAD6HMkDTN
lW2IRsVI2rgyC5C6Gqy/Zah4K9bg+AuXT4q3IXzy4i9VaYvRVMJLDzFrtvQW
+7kVbuSvr8/WV6vbgiAIgiAIgiAIgiAIgiD8fVCFM7Ri5da8r6EQKmcx2/vB
Jm3zxYsXaPZsKIZb/roHlVeJxiVWxZaY9HBMCvNGpcEzQ6mRQmu1V5uVbKCq
bGVyMY9DiZD2jueFo8iImhs84zaqr1ZNalbMzil9foiVyf50akoBNW0SwJ8/
f85PjVMDeBQqvVRcdHVUwhZ722w6ipePEoFUdEycTodXSn9psoAr5Pq7STeL
F4VSu1KrJS+DEqFqbLH36ELTGbxGpVTP31s9/P3MlSAIgiAIgiAIgiAIgiC8
OiQ1c8mOQxG4TPdGlHBFQuTSNCmWes1QH6KcJZW/PCcoovIQrv/r/XVzi18L
83yC0Uit5Qnyv3rdm2+TyExq9v9skCRutReW4ffPP/+k+LiXtGt+Rby0Uyki
MvYmyf358+f4Fy3PMXGzPWTMj+nDNpmp80s229vSKwXFC9Ns76GFDqfZAbxM
ngHFDtys8yLOKxWXx832+vlfrdIWe1GdMqk/O01wmO0ngN5zJZxnKaXHTRAE
QRAEQRAEQRAEQRD+JoYS2dtQokiaM5TB9Xba+hy+4om4VKgIqvpwUkdJa7Uy
BdtQ/zQsopQCFZWSi5lku2vV3HdbNDNpfkaKb9X8mVg1t9WKrMrPztVds73Z
tsne2QjNQaBJtlWzJ7doJuIYmbZJMyfB3GTvDNzCzMVNzLM3zwbK71Zmtk0Z
4w5b+LXTLvyLBYUOxqlUeQnz+2sxEud5IfC6QYbo/GKp8PF6+WyOckZ9NvRV
3VCdfnnN1nn+UWqIXhhP5fl6Ka+SnzeChXmnSSWf7yw/giAIgiAIgiAIgiAI
wn8Mkpi4bvaWZChFGFTUab26aNbx6nmw6GzCKQXlGukyTZpptKIrGgqJXEm2
2Jtkp3TVSjnz89K1WzTXIib7dSG5ZTIdZWGK9wu2yKOZ+QMx2y+1abJZd/PI
aOz9gjlOh5Bnz57RIZgrWs7SzBaURCtxHhOiWZnLkRfaepdWTee3Ms0Zj8Kz
k68PC7N7p3LDEqDqQddIQjrFMWtG5i/sPaWbmWtxUwoSvYk5b6FSojjPnz/X
V1rulJtjZtMr+kquHKh/3F6xYr+wd3evZElfew1rsnJq/pAqleetYmHuaAxz
+I7zIwiCIAiCIAiCIAiCIPzHsDCbWEWJMr3MgvQ1zmWxt5tVxGETU8L1FuMU
n6eWElYjbydckCTxkITl1EV4Q1JKll+yIlTqz0hxrDZpNzk5GTf+/PPPmJiY
Z8+ekeaZkJDw5MmTpKQkEqshcmJiollbBJNLhSSTRkZGxsXFUWbg8Lt37z54
8ABSQ+kYUrhr4+nTp5AsJA67wsPD4ff58+eYSdj1+PFjtBiHdCDanTt3zp07
B/mBPEAE2HXhwoVjx46FhITAGSEQDjl9+vQff/xx48YNSC02NhYPhIuCXfHx
8RAHpWxIxMzcpKOIHR0djZeGhQaZgTw/fPgQAi1sPc2nNnBFS/gLVwcpo2qN
mbdqDsmxNEgPJ+t3iybUQ8qYH7wiDIfUDCuqUid5laDKadUmNXid4Uq4kqz+
cTN8iMwpTFqZmdMhfq5XEcP1GjjGSeX5erOYdR6TUnni3mpOBEEQBEEQBEEQ
BEEQhP82FmaTadb5XngjepRe9+MysiIL68VD/XkNc8L3KvnnYrtybErCe0oq
osWm2T5//hyNpc02U2qUYVG75nnAX9gVGRkJv1hcEPnx48enTp168OABHIIJ
3rp16/Tp09euXQsPD7948eLGjRsDAwPPnz9/8+bNu3fvnjt3bt68eRBy48aN
mJgYSGH37t2LFi2CaH/88Ud0dPSTJ0/Wrl37zTffLF68+ODBg1euXIEDZ8+e
PX78+F9//XXnzp1BQUEQPnr06HHjxq1cufLo0aNwloCAADgEQiAO5AdOBAk2
b9586NChCxcuhDiQwylTprRr165Pnz4zZ87cbGPw4MF169aFkLlz565fv37T
pk09evRo0qRJ79694Yw7duz4+eefmzZt2rhx4379+mEIXBekP2nSpG7duk2f
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
jh07oCShtFu3bg13uUSJEhAORT169Gg4Ch6W/PnzZ86c2dPTE54mOBFEIAv2
NGnSFCtWrEKFClB5IJBs+yE+RINqg8uqYh2GGpUvXz5XV1f+RMCudDa4Dbn+
8dGHc5QHUImjf1iUB4c/jHpI8NenaejoRv9JBRqZ582bF54acjsDzx06UKpY
sSIuXAv5h2iFCxeGGwr3BVotqCdZsmSBBxmiQcnDPYKbDnf/6dOnUJ2ggkHt
+umnn6CaXbp0Ceohqd+3b98+e/bsjRs3oJInJyeb7V1LKZOSqTfjXAk3XOxY
L4/zaVPe+Os7Djrq9fqvt4fF3gu6KOGCIAiCIAiCIAiC8OqkMo423GVO+ety
RUAws0XTlAE7FzdICaG9JrYom8X2qTuXqdHOEH8tbKE3imzVzLDRQFGfstl+
NTc8ymIzYoRdqGw/f/48Pj7+2bNnZm0FOrNm7339+vXTp08HBwdDhJs3b/7y
yy9z587dvHlzYGDgzJkzGzVq9OWXXy5atGjKlCnly5evXLny559/3rVr11Kl
Sjk6Ojo7O5csWbJo0aLp06cnSYp0qjRp0iiepfVCtKE3D9LZ9P49lO1U3JU4
pKBdc7NS0spgw8nJiXuWIJcj6KyjTp06VatWzZ8/P6rZ+fLlw8U3S5QoUaZM
mZ49e44ePbpVq1ZVqlQpWLAgBA4aNAhCOnXqBNuZM2f29fWdNWvW5MmTu3Tp
0rJlyxUrVgQFBe3YsWP27Nl9+/bt1avXqlWrzp07t2vXrh9++MHf3//JkyfX
rl07duzYhg0bfvrpp+PHj0NIaGjoiRMn1q1bBxHOnj0L9w5u6N27d+/cuYOO
kZOTk2EjMjIyNjY22UZ0dPS9e/fu378fHh6OVQh23b59G246RKNKHhUVFRYW
lpCQYGXmr3A41UOz/eqBUH+gtjx9+hR+sS4BiYmJ8BcSoaVR0aUDT4Q/WeSN
h2t6VpurCly4kB4TdAHN9T18ZHDBxJRmjiiQFEW8KCiTpKQketxg+9GjR1Ag
UIywjY8VXBoUWkREBGqbZtt6jnFxcVevXr1y5Qp+HIEPJhTj48eP4UZA4jEx
MVCSeJtOnjwJKWD5//HHHwcPHoSnzGxz3AHhkA7c6yVLlmzZsgXuIJwXHr1D
hw5BxRg7duz48eMhBTjLjRs3tm/fPnXqVKghjRs3/u233y5cuADVBipJv379
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
s2Z16tTJli2bs7NzgQIFfH19cQE4lFnSpEmD1pVcKTL0tas4GCHvIlzGoW3u
oMDBXvpW4vBzpUuXrmTJkmXLlvXw8ICYn3zySbt27fz8/CpUqFC/fv0xY8bg
go81a9ZE17vTbPTu3bthw4abNm26cePG/v37cYm6R48excbG3r9//8iRI2vW
rDl06NCTJ09u3bp16dKl06dPwy7U6O7duxcZGUllbmYKtoWZSpLwYhiH6hWp
0FxsMTEHAqRzWthkh1Wz06bDrZpBOFYANMq1Mp2TjiLNyqrJrdwSmM5FlZMf
btFUcUU05jkn9910oJKI/ulQ/lKy+piUbf74mOzNO18wbyRcpubyl/68+szo
FTAlxKyzHuenUKQ2XlZcXadaZDWS+JRM6o+iGkLPPj+WSp7yg7vILhenMPDr
APz6gBuxc9GSDue3lWeM58ekOcfACk8HmrRpFKWVszKTYLqJdEUYXxHwLZqx
OjyYSUlJJLHC3piYGHiKg4KCzp07RxUAnuXg4OC9e/fu3LkTl1IF4EE+c+YM
POwTJkyAVmLq1KmwCx75bdu2wTa0Eg0aNIDmJV++fP369YMWsmfPntC2VK5c
2cvLK1euXLDRvXt3XF42b968+KkLtFGOjo6w7ebmBu0nn5sj0RtbQh7OF+U0
/KqFOzxP/csXfcOrJKtvt+kUGTJkgHYSWku4arJ1hwuBTqFHjx6TJk365ptv
YC9cLIR06dJl8uTJq1atgq7k6tWr0DDCjYC/q1evPnjw4MWLF+EuwL3AGwc3
CPoaaD+hV4KeiGZVeP3Xty10o+kvPRQ8TipYdJNQSleeUqdseQVSP7UgCIIg
CIIgCIIgvA3e7IBUkcKUQTQfLL/6iNhib2ZmOPRWsGiyJCaOIiceSCEmzflJ
TEwMrpsGf2kNvqCgoJUrV/7yyy/nz5+H7dmzZzdq1GjgwIHz58+fOHFirly5
ChUqVK9evW7dupUsWdLThpubG+otekEbBXC+2JzyIT/XqBVNRu9Q11CxgWjp
06fPkCEDri+ZNm1alJXQoUG5cuUqV64M2XZycqpSpcqIESP69u3buHHjzz77
bNGiRbQo5OLFiy9cuHD48OH169cHBgaGhYX973//e/jw4blz5wICAg4cOBAd
HY2FBrsSExPNtrkGtM0mM1201kZbbhIPUTC0amqwxbYeKIaYNYNDRfrDOC+Y
o11eH7iwQ7eVW8xyEdWq6YFkc2tmii7Fh13oTRpTVuJQoFVnFm7RVkoluBxk
ZTKmhZmIm5mlJdVtHv5CZ76uXH4qz47ZSEY2MetlCuSPlYmZW5s0DwxKPlN/
WlPCYiSGc71OecwV81fKBrnytuicw/DKRjeItzC8Fr1gziV4+eBVYzhtmzWl
EdsNshLnd4efBaNR6dG16LNkmAclkG4H1VKz5sxHuSK9Wm6yLdiKcWgpXipG
friJWRRTDs3MxJ0/TRbtWwaT5rUDHvmoqCjMAGyHh4eHhoZCu7Fnz57ly5df
uXIFWoyQkJCjR49u2rRp1qxZY8aMWbp06Z07d06dOrVu3brp06f379+/du3a
0EaVKVNmxowZc+bMGTx4MLSxXl5e0IJhUwbNrJ+fX8WKFfPkyQNNHDf5zpo1
a6ZMmbhyntKkIaF4RzeMr7TVHGq0SZmnY7l0j42/s7NzlixZIJOYQzgEV3Yo
VqxY9erVO3bsOGHChHnz5vn4+OCc4xdffAFFtHbtWiif27dvR0ZGQhmuWrUK
eiUIgX6KPyZWbQKRXIvz2mthHxeYUp5TS+mxNdl/rME7WYs2lWzYKSsPrzkF
G3L+OAiCIAiCIAiCIAjCGyclMeptnMhQA9eTemYszKrNrDNPTSlNLtSgOBMT
E4O2vomJiZcuXTp//nxoaOijR48OHjy4evXqs2fPwt9du3aNGTNm1KhRvXr1
KlCgQJo0abJnz16pUqVixYp9+OGHmTNn9vDwIAPvdOnSZcmSBVUaRaA2NCDk
2gvqJw46J7pcPOepkbYDGciRI0eGDBngL+SnaNGihQoVypYtW65cuWrXrt2p
UydfX9/06dPXrVt37dq1M2bM6Nq1K1zLvn37rl27tnv37qVLl27YsOH69es3
btyASz569CjK3U+fPoWQJ0+ekNdiku+onPkdsdoMp81MNCb5BYVKM9OW+X0k
DzNWtkwkKSovNH/LVBPIyQOplCZmpkvpcLnYrPly50IN5ZBq0QvmE4NkJX6Z
L+w98Vp1cjSlSVB9VgRSim9iVuUUQrMAlGeT5rtb7yFBfyNe+hgq0qshJnt/
KTy3ZqaEGz6eSvo8PPUsGaLcKZ4ri2bJzG9oKijTE4Y5MbHvBSxMzSZTf4pJ
mbFqLp0tzAkJVmZ+1yzMYtbCpmN4IfC/Sq6oWmIgnJEW/TQzSZNivmDeWrCI
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
AOPr2NjY5OTkxMREGGnCuPLevXsLFy4cOHDgggULNm7cOH369CJFitSoUaNa
tWqZM2fOnj27t7d30aJFcX1JvZ0YDYdp8EtmaYotmV4qd3FxyZ8/P4zcISaM
3CtXrgznrV+//rhx45YtWwaj++7du48dO/bMmTPHjh1btWrV3Llzb9y4gddF
OjYa75FdN1+Akganin2XgrKX6zB/cySrF6L56cgzqgyZBUH4P4XS6PFGUt9c
m96QI6mX5scQvUSv106pJafUlGsh3ZubHNMVvTRjdDrsuwGU06G/e/r06YMH
Dy5dunT48OF169ZNmDChs41t27bt3r175cqVENK6desqVaoUL148V65c0OHm
y5evUqVKFSpUyJo1azobeg1c6bsd7Bfo1C/WmYq7cv5dGL4qpE2b1snJCc5e
qFAhyIyjo6ODzbNZjhw5SpYsWatWrTZt2owePfrXX39FRyshISH79++HFwO4
nBMnTsD1oiSOUyRWtmAHlZtZ5xjHZL/oidV+WpbPStDEh1mbLqEU+HyH1d5H
vVlzoYa3mxy8KNUp9Xut3PeX1FpBEARBEARBEIS3iX6Q8trjFIuR8TZfFAy1
bhyd4QqVpO6ShTMmRdo4fcqNuYK/NEgMDw8PDQ19+PDhvn375syZs3z58mPH
jgUGBvbv37927dpNmjSBsaebm5uHh4e3t3fBggUdbItkwUBV8S+KEjf5IKW9
3HMpOT9RFHIYa2M0+PX09KxWrVqZMmX8/Pz8/f0nTpzYqVOndu3arVq1aufO
nbt27bp9+zZewqNHjyDbsE1mYFbNWTeNfBU3syQ78BFoKjK4onKYmIfwNzIU
1YsqynnNooQLgvB/jJSUcIvRh056RfEdZ1XpMgx1cjMzMtd3K6SZ0zY/KvWz
KxeulAB/K4COEjrNy5cvX7hwAbbxfSAhIQFeAI4ePfrLL79MmDChT58+w4cP
P3z4MMSB14Bp06b16NGjZs2aXl5e0GtDLw8vA9AjN2vWzMfHJ1u2bChT0/dc
/AMu0skV3+P8xSB1Dy2KnM7/uri4FChQoGrVqq1btx4wYADkB1cRLV26dOPG
jYcMGbJgwQK4CrheNOG+e/duQEDAxo0bT58+HRkZaWEW/qRg85co3iNTedKr
hYl5TrPYfztA23SD8CMvkzYXr8RMRQyXfl8QBEEQBEEQhPcZQz3zNQYyekWU
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
Ilh9+vRpcnJyWloaBXvklGBbBRm/tbnxrVYqVM6/RW6UiVWEAAAAAAAAvKdQ
hqJIZNhTTWtCtTqPdGZmJinhipIjtH9CQsLvv/8u8pdx48Z16dLF29vb1tZW
rxWcveI8+D8d+ZjGOeURGZA4skhw6tevP2DAgB9//HHHjh2XLl0KCwtLT08/
c+bMunXrtm3b9ttvv12/fj0+Pp5acyrWscopmNyYSZG+QQwHAAAAAFAjC90v
VKhd4uw0oCoo4ghpaWna3BIoZ8+ePXHixL59+wYOHOjm5ibCPGNjY3NzcxH4
UayoqHyiwMzMzMLCQnzKwcHB39+/YsWK1atXF8HhmjVrREwYFxeXkZFBZyLC
WjZO0IA9HlwChYuWa6Xe9BQfquuiIEoEAAAAAADgvSCvdZ1cTkQrmagpXyC3
TP6fFfuIvEYkNffv39+zZ88PP/wwYMCAli1bVq5cWRbGjYyMihcvXrZsWUtL
SzmXIT1coZBz1qNQy8VBxDGdnZ09PDzq1q3bu3fvmTNn9urVy9vbW2RALVq0
6NOnz+zZs7dv337x4sW7d+8+efIkJSWFkiDKxbgrk6yB0xhVHAEAAADw4aG3
UscrhDp6lfBsFbKPWgzInyCCscePH69YsWLhwoXz58+vU6eOo6NjxYoVixUr
JqI+7nfJ4Z9iQNYIKyur0qVLi4/4+Pj06NGjffv2IhQUId+lS5fOnz/PveO1
uSp3ZmYmy9r8E7hKHoe4/NO0udEvifYUG7MejrAQAAAAAACA9xp2htNL1r3l
0ogU+VNawZ+SC4nIR6B63cnJyTExMcHBwRcuXNi9e/ecOXMGDRr0ySef1K5d
+6OPPho2bNiMGTP69evXsGHDKlWqiFyGLEDqtpsKMZyqPqprRVpYWDg7O4tM
Si6xYm5u7uHh0axZs/79+0+ePHnr1q1Xr14VZ5WWlkYVYLgOjCyGsxKenXd9
dQAAAACA9443oYQrUIjkNBAR17Nnz0RwmJ6evmPHjpEjRzo4OIg4TcRv1Fq9
cC5yp0uuf8JxnRiUKFHCy8vL3d29bdu233333bhx41auXBkWFiYO/uTJEzZv
c9EV0rFlL7pWp4GrrR05UnMZvibcypOP/E+uPwAAAAAAAODfQrHAk7IGNsbQ
FtKKWSKmtxTmmbyOSXD5lDt37pw9e3b79u1bt269f/9+ZmZmeHj4H3/8IV7O
nTt30KBBDRo0KFWqlEiLjIyMOOVRGIEUNiFZJFesnJWTKRrY2Nj4+Ph07Njx
m2++Wb9+/fnz5+Pj48VpaHWOILbEc+IGJRwAAAAAHx4KJ4Pa2JAP8ppBrjQi
F9YmTwUtxBMbU1JSROA3Z86cfv36TZ482c/Pz8zMTBHdcfymboJJ/gdTU1Nv
b++RI0du27Zt3bp1x44de/r0qWJZn6JEuWxTf4WI7h8+LAAAAAAAAAC8j7Cx
55/nAjkvFySXV85qNJrIyMizZ8+uXLlyzJgx7du3d3d3F1mPXn2bX/ISWi42
LteTzAdx5OLFizdp0mTQoEHz5s3bt29fUFBQbGxsRkaGNlfqj4+Pv3Hjhkjc
EhISeP2sVtdkU/27FIO8fv7f2h8AAAAA4DUix3JygKc2dcsf4UG21Hxcq/NL
i4EIn8gmQSVQqB6diOsePnwo/h44cKBXr15ubm4UgLG4TVZwLn8n1z8xMjJy
cHAwMzMrVqxY69at/fz8Pvnkk+3bt9+5c0ccX7Zt/Pnnn5mZmXK/TlkJ/4fe
BijhAAAAAAAA/Nf450toFYdSFJAkq7kYiKSJHEQin4qLi7t58+amTZumTp36
+eefN2zY0MXFxdzcXK6LQnq42MLrZ2W7eD4tODnhMjY2trOzK1GihIeHh/iK
gQMHzp49e8uWLadOnVqzZk2/fv169+4ttuzfv//ChQv37t0T2Vxqair9CsUa
W8XPVGzkl3wFXvkaAgAAAAC8GrLcza7pHH11TvJ6ai8XHqEtInKjj6SkpCQl
JZ05c+bIkSO///77zJkzmzVr1qZNG19fXyMjIwrDDA0N1f4EjtNEUCf2tLa2
rlGjxogRI/r27Tt06NBLly6JMOz8+fPii2gRH50wvdTq3Ol0SmolXDaKv+Wr
DQAAAAAAAPiPo1cJJz8PZzSERqNJTU198uRJSEhIUFDQ7t27p0+f3rt37xYt
WlSrVq1kyZIiUaK8SQyqVKlSqlQpe3t7yrDyt4XrfVdkYZaWlmXKlBEHb9q0
qUjBxEuRkRUrVszb27t58+b9+/efMWPGvn377t279/TpU5HrkQNKThUVaaP6
LXU6yRamt3DxAQAAAPBfRpaIZelYEZuxEs5L4eSBfBzqlh4fH5+cnHz79u1D
hw517tzZxcXF3d1dRFByITvWwBXr++glxWDOzs5eXl5ffPHF+vXrRfgXHh7+
4MEDra4HDf0EOmEu38cDuVIKn5685V+76AAAAAAAAID/KupsSy4yqdU1r2T/
OSUvYmNqamp0dLRIss6ePbt79+4ff/yxT58+jRs3rlWrVvfu3Tdt2jR79uy+
ffvWrVu3VKlStra2pqamBgYGRYoUUXfelNVvLkjOY87LxEvZgk7HEWldzZo1
u3TpMnny5G3btl2/fl2cmNxIVP6l3JeTks1sqRrn27/yAAAAAPiPo1DCKUTJ
frmktl7pmHZmeTwrKys+Pv7BgwcRERGnTp2aOnXq5s2bJ0yY4OrqyvZvlrvl
v1z6m14WLVq0Xr161apVa9as2axZs+bNm7do0aLLly+L4IpqnsjnkJ1bipzP
QaszqGt1Qr38K9Se8Ld3lQEAAAAAAAAgF5K15dxEnbzwnvKn+CUXUQkNDb14
8eLBgwfPnTsnPpWZS3Bw8OHDh5ctWzZ06NDGjRuXKVNG5Fyy70gteiu0cbVp
XJbEqaAlj11cXFq0aDFq1KgFCxYEBATcvn07KSlJcf7iVLW5Cj+95B/IlWH4
srzZSw8AAACA/zZy8RMSltkZzpGYIjyjHeTVbSLUuXPnzvr167/44gsRAnXp
0kWESWZmZo6OjlwAXFa/GQ6iKB7z8vL6/PPPd+/evWvXrn379j19+pTs5YpF
glyBnDcqDOoUTeW83NdGlsRRGgUAAAAAAADwr5BXDyN6ScYkxc6yNi6/ZHsS
ZTeUB9FB6PjJycl//PHHxo0bJ06cKFItf3//kiVLcpNNOS8jZA1c5G60p17N
nHo80ZgKWhYrVszDw6Nx48ZUbHznzp3nzp0LDg5OTEykpbs3b94UW0TmSJVV
OGtDagYAAACAt4McelH0JSvhCk+17LgWb0VFRd24cSMoKOjYsWPDhg2rWbOm
iJpEsCQHRXpDJmrRQjK4lZWVCJY6dOgg/v7000+XL1/WaDTaXLlbjgPlIid8
5lrJBK6VXATZL3djyYu3frEBAAAAAAAAQE/fTM50KPHRvtyGUl1tm3Il3sjm
6szMTDYs0aGysrJSUlJiYmJCQkJEtrVz587p06f369evadOmXl5esjBOird4
aWFhoS6KUkjXalNhF1cUXTEyMipatKirq2uNGjXEV4gvmjdv3v79+/fs2fPl
l1+2bNly4MCBM2fOPHjw4NWrV588eZKQkCBOj9b/IlkDAAAAwBtFNk4rnAmK
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
eXmVK1euX79+O3fujImJoQPy4qnMzEx55VSO1H1DPT9CAAcAAAAAAAAA8AGg
zm0Vq6GfPXt2//79kydP7t69+9KlS9pctTkxMfGPP/7YsWPH9OnTRZbt6+vr
4ODA9cMVS7MV5VO4/LiiDjlhZGRUtmzZhg0b9u/ff+rUqbt27bp37x454rSS
l5vtc2yuE0k9u9pkw5vstZOLrAIAAABvGlkJp7mJLd8sQZMYTlMY7SOIi4s7
cuTIsWPHxN969ep5eHgYGhrKT5kVxcDF7GlmZmZqamphYeHv7z979uyLFy9u
2bLl+vXraWlp/HSYJ0E2gSueMmOKBAAAAAAAAADwgaEooC3nv7ISzu9qJVU5
PT2dt2RlZYmXkZGRJ06cWLp06ciRI9u3b1+zZk17e3uyqMkmcLKuqUuL01/x
rkI/F1sMDAzc3d3btWs3ZsyY1atX//bbb8HBwSkpKSwgcAMySufF+fypQ3a7
yb+UB/nwVv4RAAAAfODw9JojFQznZ7g0Z2klgVq8TEhIuHDhwvTp02vUqFGx
YsXatWuL+VSWweW5Vbwl5kojI6OqVat26NChefPm/fr1Ex+Piooi4zd/F02X
2tzH2TxvygXMMf0BAAAAAAAAAPivISfCnJsrLNbZum6VnE2npqbGx8dHR0ff
vXv39OnTq1evHjt2bLdu3erVqycS+aJFiypUbqqXorfhJiX4/FLsZmJiYmdn
5+zs7O7u3qJFi1GjRlHDzcDAwMePH6elpYkTyMjIuHPnjtjy8OHDxMRE8VJd
IVzhhdP+lR4OhRwAAMArIxvCc3SFvKg4iSyJc0Uvsc/9+/dXrVrVtWtXe3t7
o1zkR8mKeZOU8HLlyrVv337hwoX37t27fv26mAppgqODi3FWVpZW6sUpr5OS
T0b2hwMAAAAAAAAAAB8YOfp6YOXksT6aMmjan8qcanVJPe0gd91KSkoKCwu7
evXq0aNH165dO3HixE6dOvn5+Xl6ejo7O5uZmXEur+6tqVDFFe8aGho6ODiI
xL927dotW7YcMmTIggUL9u3bFxAQ8MMPP3Ts2FFsWbx48bFjx+7evfv48ePE
xEQ23ck//NWUcOjhAAAAiILMF7ISzqVRtNLsyfOpmLAOHDgwePDgihUrWllZ
8fRXOBfFFGlnZ2drayv++vr6Tpgw4eTJk2La1eoeW2ul3hn8OJt1bzaoQwkH
AAAAAAAAAPBf4C9FXTkd5nResQ/5zcTfrKws+V2FkC6y7NjY2Fu3bv32228/
//zz1KlTu3XrVq1atZIlS4os3tzcXJa7Zd2bbORyC05eD84DExOTMmXK+Pn5
1a9f39XVlXYTx/Tw8GjRosWAAQPmzp27b9++8PDwtLQ0vT/51cRwSOIAAPAf
p+AyeLbUppkc2mJmpKe0V69eXb9+/d69e8Xk2KBBg6JFi7IDXJ4TubyYlZWV
mD3759K3b1/xwcePH2s0Gq1uSRfP12JA38XnwHq4omI5W8QxrwEAAAAAAAAA
+C+gV93lLZxWs8qtLiuqtpMpOl2yMy02NjYwMHDbtm0//vhjr169fH19LS0t
1Ym/rIGr7eLqHdTectLMjY2NPT09O3fuPHny5LVr1549ezYiIiIjI6MgVwOS
OAAA/GcpyB2ea4/k6CqBs8KszZ0HaSrM0S2q0ubOhuLdZ8+e7dixo2/fvi4u
Lm5ubs7OzmK24hYbhaQmGvRXvGVra9uqVatJkyYFBweLj4eFhSUnJ+dz5mpB
Xta9+azkauGv9wICAAAAAAAAAAD/WWRVgYXxp0+fHj9+/Keffho2bFjr1q09
PT0tLS1ZCtArg+stMF5IV35ctpQX0i0tNzExsbW1dXJyqly5ctu2bceMGbNs
2bKAgIArV65ER0eToY7PSq8gwMvb2XcnD3KkXpyKgfoivN6rCgAA4G1C93z5
+S8VOZEfH3MT55zc5s78WbE9LS3txIkTc+fOdXZ2FhMTdcM0MDDgaYv0cMLM
zKxs2bJiTzF5jRo16sCBAykpKVppnlJXAJNPUj4r9Uu5QAqUcAAAAAAAAAAA
4PXCugFn3BqNJjMzMzU1NS4u7tGjRxcuXFi7du3o0aO7dev20Ucfubu7W1tb
qyulyFq3XnO4vFFRdMXMzMzR0bFChQo1a9Zs27btiBEjli5devDgwcuXLwcH
ByckJGhfFrpZ/eYz526hWp0coVh+rs3DWP6WrzYAAIDXDt/zeTrQ5s4FYjrL
yoUfqvKUJ/YJCwvbsGHD9OnTV65c2apVK3t7e/VTXTFD8fNcMfeVLVu2ZcuW
c+fOnThx4uLFi8WRSQYXA2qyKbfqeOVfAU84AAAAAAAAAADwJpCXh+eoirGI
ZFwk+MnJyeHh4devXz958uTGjRvHjh3btWvXjz76yMPDw9nZ2dTUVC2AFylS
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
n8JtGQAAAAAAAAAAAO8mrGnQUvrIyMjbt29fuHDh559//uabb7p06VK/fv3K
lSvb2NgUKVJEoX6zG1whicvecnppampqZ2dXpkyZKlWqtGrV6uuvv16+fPne
vXsvX74cHh6empqqlv1Z85fFf7n/plaSaBSFVgAA4AMgR1feStzisrKy6CXd
6LjqlHiLXNni7927d5csWdKmTRtzc3OFCVy+S4t7sni3fPnyPXr0WL169bVr
18T9Py0tjb9R1sMVt1k+MRlZEsdNGAAAAAAAAAAAAO8gObra4/IW4tmzZ2Fh
YUFBQb/++uuaNWsmT57cqVOnjz76yM3NzcnJydLSUiGMK8b5+8bt7OwqVKjg
6+vbpk2bIUOGLFmyRHzL77//HhwcHBsbS/Vm1acqSy5alZ9cNrrnqEqsQ5wB
ALx3qM3Y2tzyVqyQk3M7KysrKipq//79/fr1K1OmDLc/5nU9/HTS2NjY39+/
adOmrVu3njZt2tmzZ2NiYuTeE6x+kxedv/cvJW48iwQAAAAAAAAAAMC7j6LY
CPsMWQB58eJFUlLSrVu3jh07tmbNmu+///6zzz6rXr168eLFra2tjYyMSG+R
S6PobbJJi/QVLTjFZ8VxatSo0a5duyFDhixcuPDXX38V3xUVFZWcnKzRaLKy
shQnrDg3ecA7sG6jNjG+vSsLAAB/H/nBH8nUVBSFFu+QAC7G1Bbz+fPngYGB
4rbs4+NjbGxcJBfFyh3ygVeqVKlbt2579+49cuTIb7/9FhkZyUZucZulY7Lq
/jwX+Uxw8wQAAAAAAAAAAMB7ito4zaqIVlWlnHui0W6JiYlXr17dsmXLrFmz
Pv/88zp16tjY2MiKt2Ixvvql4i22LJqampYtW7Z+/fp9+vQRB9+2bVtoaGh6
ejp/ez6/gluCyr1E1eVToIcDAN5Z+BGeohC32JKRkUH7iFtiWlramjVrJk6c
OH/+/JYtWzo4ONA6HXVDTLHF3t5e7DNnzpzLly8nJyeTn5wOxQdXtMVkzznK
ngAAAAAAAAAAAOC/gF7RmOyCpDmTfvLkyZOTJ0+uWLFi5MiRbdq08fb2tre3
Z3FbbripNo2TUVyxG20RR7CwsHBzc2vbtu348eNXr14tvuXRo0dcz1bvSeYl
2uTkwRu8fAAA8KqwE5sG4q6bmZkp/iYnJ58/f/6rr77y9PQ0NTUVN0lx8xR3
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
4mbdW281FXWhFRrb2dl5eXl16tRp8uTJGzZsuHjx4tOnT1lQkoVueMIBAH+J
4s7w4sULcQcTd5W9e/f27NnT0tKSfODyQz1+oufk5FS/fv0pU6acO3cuKipK
+3KxJv4Kufo3/2VtnKo/qeuEv/UrAQAAAAAAAAAAAPDhoxa6ZT2ZtR3yhOe1
P8EL/zMzMzUaTVJSUmho6NmzZ1evXj127NiuXbv6+vq6urqam5urtW7yjatl
cNk6ToPChQubmZlZWVm5ubm1atXqm2++WbRoUUBAwLVr12JiYkhigpQEwH+c
HKnlrnwfowGvhaEtVKUkMTHx0qVLkyZNKlOmjLjDsAzO5ZvopbW1taen5+DB
g7ds2fLo0SO65+h9Yqg+JbXizfdPVEcBAAAAAAAAAAAAeF/Q68HWaDQJCQlh
YWE3btw4derUL7/8Qqp4o0aNqOGmubm5XHBAdozLVkx5BxamzMzMHB0dy5Yt
6+Pj07Rp06FDhy5ZsmTfvn0XLlx48ODBs2fPMjMz6dy47ab8UivZOBU/JK8B
AOB9QfzfnZWVxY2ACW4loNW1QhA7iNtUZGTkqlWrmjdvbm9vL9+FZCu42Cju
Nm3atFm6dOkff/zx9OlTufKJtgA3CvX6FKxbAQAAAAAAAAAAAHhPUas6sukx
LS0tLCzs6tWrx44d++WXXyZNmtSpU6fq1au7ubk5OztbWloaGxv/Zb0URY3x
QroGdtbW1uXKlfP19W3duvWAAQMWLlwYEBAQFBT08OHD+Ph4ueyAojr6n3/+
maMq9iKfuXrjm7+QAIBXh3zXsuhNqjgvYCHEODo6+rfffuvYsaO4BZmYmBga
GpLuzQ/jqI6Tvb29l5eXuGUdOnQoNjaWH6JRle9/eE+ADA4AAAAAAAAAAADw
/iLr4aRKyW/RFo1GExYWdvr06Y0bN06ePLlnz54+Pj6Ojo4mJiYkd5Mhk/6S
3M0DfqkutCL2NzQ0LFq0qLe3d+vWrYcOHbp3796UlJScl/ts5kjN7NQn/7e2
AwDeKbgoN8nU/P++eEkNK8U4OTk5NDR0ypQptWvXtrW15ca+8v1EbDEwMChb
tuwXX3whblMPHz5MT08nJzn3Eea7Cu4PAAAAAAAAAAAAAECrc2nmSMVyWaqi
HbKysu7du3fo0KHFixcPGjSoQYMGpUqV4oabanO4eszauIy1tfWIESOCg4M1
Go3eciiEXKpXId1roXEB8F6Ro+tNSUq4+EtjFsYfP368a9euxo0bly5d2sTE
RK7FVDgXMTAwMHB2dvb19V26dOnZs2fFDYqt5nwoLW4OAAAAAAAAAAAAACDf
RnJ6C49oc6sNpKenazSa2NjYS5cu/fzzz99++22nTp38/f1LlixJwrjatynr
4YULF/4/HWJsYmJSrly5zp07T5gwYePGjZcvX05MTJSb6MlqvOJk9JYsgPAF
wLsP1ULR6kqj0P/jYmN0dHR8fHyfPn28vb2tra3pBsIde7ltga2tbZUqVYYN
G7Znz56MjIznz5+Tn1yrKzBOxyT+8mT03jRwJwEAAAAAAAAAAAD4wCCpWVGZ
hAfsxOZ9+G9aWlpiYmJYWNidO3fOnDmzbt26cePGde/evUmTJpUrV7a3tzcx
MSlcuLDeMimkh8svDQwMxP4uLi4tWrQYMWLEsmXLAgICrl27lpCQwFqWopYC
AOA9hSv/P3/+nMYZGRniZrJ06VJfX19bW9v/Z+/Oo+Qq67yB95o9ZCMkYBKC
CVtkFQQmgOwaWWRHXg5vEAREGAdxBUbyhgEdZwyCHFQWwUHCKggahBNlk8gi
+04g7IFsZF86XUt3v3f6MY+X6nSl0+l0VdKfzx/33Kq+dbuepO499377V7+n
W7du6VNEcn4IeXjv3r232mqrr3zlK7fddlty5omJeqgJb2qO0+Myfa6QbAMA
AAB0WastqG7Ze6TlNuli7Fh4uWLFipkzZz777LNTp079zW9+c+mllx533HF7
7733dtttt8UWW/Tr16979+6xpDPd7qAgHk82Gzhw4PDhw5MXHnjggf/6r//6
85///I477pg2bdqbb765ZMmS2LwlhmCrnVITKE/x4I1/hps9e/ZDDz2UnDHG
jBlTW1sbZx8o+HtZcho56KCDLr744kcffTSbza5cuTLuMKyEvaVnGejwv5o5
zwAAAABsoAqS7fTzcSWmSem+JemNYxAdm6gsXrx4xowZDzzwwI033vijH/1o
/Pjxn/vc54YOHdq3b99u3brV1tYW9E6JqXjIvuK0mwMHDtxqq6323HPPI444
4swzz5w0adI999zz97//ffr06fPmzVu6dGlB9wM5FZRK4yc1rTpjpL91EtbD
86GHycsvv/yDH/xgr7326tWrV01NTToAjw2X+vXrt9NOOyVngDvuuOPtt9+u
q6vzxRAAAAAAykecf3Pp0qWvvvrqXXfddfnll5955pn77bff0KFDYx6ervxs
+TDdIWHIkCE777zz4YcffsYZZ/znf/7n3Xff/fLLL3/44YfJ/jOZTCg0TYfh
6Ty/5UpB54S29FKQtMNqNbbQtOp4CYdVPL6S4zRZyWazM2fO/NWvfvXFL35x
9OjRoR1Kyyl3e/XqNWDAgGOOOebKK698+umnlyxZkhzppR0pAAAAAKS1nHMz
pOL19fXz589/7LHHvvvd72655ZYF6XeoBg/PxIrxmpqalq1Uamtrt9hiiz33
3POkk076j//4j1tvvfWFF15Yvnz5anuep9fTcXc6r2v55gtiPaA1sYd/lM1m
Y2odisDDl0fC1JZ/+tOfTjvttF133bVnz57xqI99UcJKnz599tlnn3PPPffP
f/7zRx99FNqhhONXHg4AAABAWUl3A043TFi6dOkf/vCH4447btiwYb17915t
KXhIwmMeXrAeI/SqZt27dx81atS4ceO++93vXn755VOmTHnttdeS3xL7iof3
s9qO4umse7UzckrCobiCGDwcRPHAj9Xgyfrzzz////7f/9t///2HDBkS+58U
/EWsV69em2222emnn/7rX/96xowZdXV1cV6AEKQDAAAAQFkpqMqOM+UlD5cv
X/7MM8/ceOONP/zhD0855ZQDDjhgp5122mKLLXr37t0yFQ+Jd3q2zfQ2MSHv
0aNHv379hg0b9pnPfOaggw76xje+8bOf/ez3v//9E0888fbbby9atCj9TtJ1
qm0s/BaJQ0stC8LDtz9iDB42CMF4csgnR3qvXr0qUtNiJodwqAOvqanp06fP
IYcccuGFF7766qtz585NDtXQUTz8TS3XrNQjBgAAAIDVKCi6js83NDSsWLFi
5syZL7300oMPPjh58uSJEyeefPLJ+++//0477TRixIgBAwZ069Yt3Rol3Uw4
3UElrMfuCiEtHzRo0OjRo3ffffeDDz74rLPOChNuTps27ZVXXpkzZ87KlSvz
+XxrvcTTDVI69R8LNkCrrQkPLcFDfJ2sLFiw4L777jvjjDP69esXDuSW3/JI
DB8+/Prrr3///febVvVCiRXmBe1WAAAAAKDk0iFzWnwytjtI9+tesmTJG2+8
8fDDD998880XX3zxV7/61T322GPkyJH9+/fv06dP9+7dW3YRb6nlj2qbDR06
dNdddz388MO/8Y1vTJo06Y9//ONzzz333nvvffzxx8uXL49dF1p2OBeGQ3Gr
TcJjcL106dLHH3/8sssuGzNmzKabbpr+TkeyEnukJIf5qFGjTjrppJdeeim8
PBx9yUpyeMYKczE4AAAAAOWmoPFI7KJQsE1Tqsgz3VF88eLFL7300j333DNp
0qSzzz5733333XTTTdNtUkI7hRiP19bWFjRUiQ9bzrk5YsSI/fbb7/TTT584
ceKtt96a/KIVK1a0fD9NmqLAmrRMwkMPk6VLl7755pt33XXXEUccMXLkyPTf
qtLf4EieGTJkyBe+8IVLLrnkiSeeWLBgQWyoEvYTVmKvlVIPFwAAAAD+oUhl
dUzCY1l4wUsKnowPFyxY8NRTT11//fXf//73TzjhhD322CPUl662ILxls/H0
NjE8j0XjI0eOPOyww7797W9fffXVU6dOXbJkSX19/WrHAl1Tax31wzOhAjyf
z4evVyQryUF07733Jkfrpz/96X79+q32WxvJ+uDBg3fZZZezzz57ypQp77zz
Toi+YzV4+HZJTNodjAAAAABsxGL7lEwms3Tp0vnz57/11ltPPvnkzTfffNFF
F40fP/6LX/ziDjvsMHDgwNB4IbYTT0/Jt9qEPP2we/fu/fr123zzzXfeeefn
n38+m82GqtSm5tA+/U4K1kO2X1D6HjdLx3dtn50TykRj65pSH/4QVoc/byXH
zsqVK6dMmXLggQcOHTq0ItW9P/7pKjkke/bsOXz48BNPPPEXv/jFq6++GpoU
FbRAkYQDAAAA0DXFxgvJcunSpWHCzYceeui3v/3tT37yk1NOOeULX/jCjjvu
OGLEiH79+hVUn8YUrmXvlKpm4UcDBgz44Q9/eOuttz7yyCNvvvnmihUrYp1q
U4v69jipX8uYrqAPDGxw0il0S/GIiAdIqAwPM+FeeumloRQ8PdFt7Iuy+eab
jx07NtkmOXjnzZsXou+wz3RrlPhMiMeF4QAAAABslFpLvVr2G1+5cuX8+fNf
e+21kIr/+Mc/PvXUU/fee+/Ro0cPGzasb9++NTU1BUXgVVVV4ckC3bt3HzFi
xG677XbwwQd/7WtfmzRp0h133DFt2rRk5x999NGKFSvaWNddUEAe80NT/rGh
SEfQ+VUKwvD4eQ7NTJIj8eGHH/72t7/9uc99rmUzouRhr169ttpqq7POOuvW
W2+dM2dOfX192Ek2mw0l5TEJj79CEg4AAADAxq1lz/AiKXRs1xByswULFjz7
7LO33nrrf//3f3/jG9/Yd999Bw0aFNqnFETf6WcKysV79OgxfPjw3Xbb7Utf
+tJXv/rVSy+99M4770x2O2PGjNmzZ4d24jGWj2Fd5/zjwPoWI+jY/CTWaYfn
Q1fwUBO+cuXKV199ddKkSUccccRWW23VvXv3gqOpW7duydE0bty4q6666rnn
nqurq4vf72haNU1tstsQiYdfmu6O4uACAAAAYGPVMvdOl4y2/FH6Ybr0uqGh
Ye7cuY899ti11177ne9855hjjtl5550HDhwYY7p0Xhez8YLMvFu3bn369Bk5
cuQ+++wzfvz4H/3oR7fddttzzz23ZMmSkAempYtX0wmeilY2FOnWKE2rGhOF
jDrWhDet+ngnksPhjDPOGDNmTPwKRuw4FA6lIUOGXHDBBffff3/4YkXykjAv
bbLPTLNwXIe+KIkQicfgXUE4AAAAABu34t1ICn4akrT0M3G+y4aGhuXLly9Y
sGDmzJmPP/745MmTL7rootNOO+2ggw4aM2ZMv379CkpYY4hXUDQeH1ZXV48a
Neqwww773ve+d+WVV06dOvWdd94JqXh6PsE0Ra1sKArmxwxJeCzYjrl08vCB
Bx645JJLxo4du8UWW8SOQ8lhElqCh5UBAwbsv//+77//fvgaRfLCeKTErDu2
HI8Ze7JNrEiXhAMAAACwcWvZFCXWozalqqzj/H3xYdymZYyWzWaXLFny7rvv
vvLKK48++uitt946YcKE448/focddoiT+qXLwlsm5NXNwlSb3bp1Gzhw4KhR
ow444ICzzjrrpz/96Z133vnEE0/MnDmzrq6u5ZuE8pc+7mKL++TAyWQyyTIW
iicb/Nd//Vfy4Q/tUAr+WhRmqt1ss83GjRv3n//5nytWrGhqjrhjg/GQh8dW
5CEJD/sPteIxdXfsAAAAALCxakv81Vr7lJYJecstQ76XzWbr6upmz5796KOP
futb3+rXr19MvGMknu7zUFAino7+ampqBg0atOWWW+60004HHHDAaaed9t//
/d933nnnww8//Morr8ydOzf5RQI9yl8oz47V2k2r2uCHSS3DMytXrpw5c+Y9
99xz2GGH1dbWFhwUoSd/cjgkx8KZZ5755z//edasWQ2tiAdjnJQz3ZslPnTs
AAAAAED7hJAtRHyLFi2aMmXKGWec8fnPf3777bffYostBg0a1L1794rVKegi
3jIeT/Tq1WvEiBG77bbbF7/4xdNOO+1HP/rRXXfd9cwzz5R60NCqgm9PhCA6
lGeHZ8L6ggULHn744YkTJ44dOzY5TMJfi+IfjMLnf8sttzz++ONvuOGGd955
Z8WKFcmrWkbfcUbO9DPxPaQzcDE4AAAAALRPKECN68myvr7+o48+evzxx++6
667LL7/8nHPO+fznPz9s2LBevXpVVVW1bP4QWovH3inpTuMFz9fW1vbu3Tt0
UCnpoGENYvIc+5M0pTqWLFy48LXXXrvxxhuPPPLI7bbbLnwVouArEskhs8MO
O/zwhz987LHH5syZE1qLp9t9x+g7HoMFbckL3okYHAAAAADWRYzmQll47EAe
WjQkz8yaNevRRx+9+uqrzz///KOPPnqHHXbo3bt37J2SzrrTNeEFUXm6ejx5
WOpBw+oVtN+PEXRs6x3aofzbv/3bzjvvHA+EdDuU2trabbfd9owzzvjDH/4w
d+7clStXxuru2PmkoPlJwRS3AAAAAEDHKpK/hSrW+DCTySxZsuTjjz9+9tln
b7vttksvvfSUU0454IADtt122/79+xeE4TEJj2XkBTplcNBOMZqOjfTDH4mS
z/+VV155yCGHbLHFFqEUPPl4h4Lw+JnfaqutfvGLXzz99NPLly/PNYs7DHH6
asNwVd8AAAAAsP7E8C2kc02pbgxxg9jYITysr69fvHjxzJkzX3vttaeffvrO
O++89NJLTz311C996Uuf/exnR44c2bdv31j73bIsPKyXarzQFuFvQMkyVHSH
Q2P58uUvvvjiySefHDvnx7/yVDdLVjbddNMjjzzy7bffjjtJXp7sJOwhHEot
w3AxOAAAAAB0goIUrqBHccHzBT+tq6ubM2fOa6+99tBDD918880/+clPvva1
rx1wwAGf+cxnttxyy0GDBvXo0aNl15TOGhmsnfSHPP55aMWKFdlsdsqUKd/7
3vd22GGH2Aw8/eee5HM+atSof/u3f7vllluWLVsWJ74MNeFNzd+qaFrVmb9l
GF66EQMAAABA1xJaN8SmEAU/jc/EeDC8JDYVDy/MZrMffPDBk08+efvtt//s
Zz87++yz999//2HDhvXv379nz56hWUp1dXXnjQrWXmzfnawvXbo0+TxfddVV
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
euPl9fX1MUtzAgAAAACQAGJba/F+AgAgJLhuMIlEV9Xcvn37Aw88cN5550mn
FFdjt3CJweXuKaeccsstt7z11ltlZWXmJJwwHAAAAACQMMJbq/BOAgBgpmrC
zfXhUun9+eef33TTTeaCcDO/39+9e/eLL754zpw5xn6kTYqQRL1pJK6W2gQA
AAAAoCVEuMnjPQQAIEbMSpoqFTfU1dW9/fbbF1544fHHHx+Th/t8PqkS7927
97hx41544YVPP/1UltGU3ZqD8Zj+5BSNAwAAAABaR5CbDN49AACaMkffsh0K
hYLBoPEj47a+vr6mpuatt97q0qWLK9odxe12mzd8Pl+3bt1OPvnkRx99dN++
ffGUfJOEAwAAAAAOqdk4l0S3dbxpAAC0RC2XKXm4bESiRd0SWQeDwTVr1kyc
OPGiiy7q0aOHz+eTDFxIrXhhYeHw4cOfeeaZDz/8sKKiQvqrqMbjgmpwAAAA
AECbkOu2CW8XAACtOHDggNSBqzBc6LoeiebkmqYFg8GvvvpqxYoV559/fn5+
vpxJvY1kOzc3t2/fvj/84Q8/+OCDQCCg+o1HTG3DVe8UAAAAAADiQbobJ94o
AABa12wSrkepom7JtDVNe/bZZ8eMGTN06NCBAwf6/X7jlOqOkg3jtl+/frfc
csu8efM2bNhQWVkp3cKNW9kPy2UCAAAAANqqpYyXmFfw/gAAcEhNV8lU3cLl
p1LdrdqkbN26dcmSJfPmzXvooYeOOOIIKQj3NJLzrBSHn3vuuXfeeWd5eblq
vRIxJeEHTGwcPgAAAAAgUxD2NosYHACAeKjoW0Xi5rbhuq6bH1cboVBo48aN
P/vZz4499tiOHTtKHq6ah8tGbm7uyJEjP/vss7q6OnmhcavqzM2dycnDAQAA
AADxIPU1490AACBOqiq7oYlQlDmplg4q6vE9e/YsWrTo+eefP++88zp16uSK
tgqXE64Uhxu3Pp9vwIABY8aM+fTTT409SKcUTdPMkbu5Cv3AwczHad+bBAAA
AABII8S/gvcBAID4HWhOszXb5rBaInFJp+vr66dMmXLCCSd06dLFXBCugnHj
bu/evSdPnrx+/fqqqip5uaZpqnN4JFqXbl5bs2mVOEk4AAAAAMAsm3PgbB47
AAAJazYMb7ZKXPJqTdPU2pcSX69du/aNN96YOHFiaWmpz+dTebhsGxsej6dP
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
l+IPROLyV5fLlZ2dvX79+ueee+7aa6/Vx8LtdrssbDZbVFRUcnLyvHnzTp8+
LQPhqixF3ddfHoYHCeEzAQAAAAAAAABcSSR2Pnu+Mo2ckbepyXD5rMvlSk9P
f+CBB6699lq73S7ptwyHS2uKJTo6eujQoe+9996aNWsyMzO9Xq8/0I6iN5Dr
tyYSBwAAAAAAAABcXBWT56Aw3B8IrtVaXhqGIVG22+3Ozs5OS0u79dZbpSRc
ReLCOhMfH9+kSZP27duPGjUqIyNDYnCZNg+aP1dJeMUvFspnBAAAAAAAAAD4
hQuKmoOmxPVtLtVAuJoPl/WuXbueffbZli1bVq9eXfJwNRMuJB5v1arV66+/
vnXr1qysrJKSEtmmUw/Az1bAiDgAAAAAAAAA4BLRk2c1JS7Btf/8VFwmuk+f
Pv3dd98tWLBgzJgxCQkJKgmXPTRVU8rNN9/80EMPjR49etGiRcePH5ePq8Rb
bmHRt+8MEtrHAgAAAAAAAAC4YgQl4eqkSsL9gQ00VWWKGXD8+PElS5Z07949
Ojo6LECaUmSh4vHq1avff//9X3zxhfV+j8cjm3KqsN06XnA+nCQcAAAAAAAA
AHCpVewq0dvFJccuKCj46quvXnvttaFDh3bs2FF6USQG1ytTGjVqlJqa+tZb
b61aterIkSOmaaoaFknF/eXT5uqlDI2H8vcDAAAAAAAAAK4CPx6GSx7u8XgK
CwszMjJeeeWV+Ph4GQgXeoW43W53OBwpKSkjR448ePCgdQXDMEzT9Je3r1gv
JfrWi1kAAAAAAAAAAKgcP7J/peyn6Xa7t23b9sQTT/To0SM2NlY1peg7aVon
IyMju3fv/sknn+zatcvj8fjLO1gqlpPLZSv1RwIAAAAAAAAArmI/lIRLgm0Y
hqTWR48eXb16defOnWNjY1X6rSrE1bh49erVu3XrtmbNGhkCl+ZwuZraUlNu
Wrm/EgAAAAAAAACAH6TKw48ePTp9+vT777+/WbNmCQkJaixcheFypl69emPH
jl2yZMnevXuLiorkIrJ7pl8rDwcAAAAAAAAAICRUW7hf29pS9ru0Fj6f79ix
Y5s2bZo8eXJSUpJE3/oGmtYZp9OZmJjYqlWrHj16TJw4MT8/3zRNidPl6Gcm
HAAAAAAAAABwGag4ua1ScetP69at69atW40aNdRYeFBzuCU8PLxjx46LFy/O
zMwsKiry+XyqIZyxcAAAAAAAAADAZUKv9ZbRbkmzz549e/jw4SVLlvztb3/r
3bu3Kg/XR8QdDkdcXFzXrl0fffTRqVOnbty40eVyqZoUAAAAAAAAAAAuK6ot
XEpOLB6Px+12Hz9+/O23377++uttNpvaN1OF4bKoVq1a3bp1hwwZcujQoeLi
4guOhavilJ/6rS7aLwQAAAAAAAAAXMVUDG4xTVPmun0+nywOHDiQlpb2xBNP
NG7cWIXhdrtd7w93OBw33njj5MmTFyxY4HK5DMOwLuv1eiXKlmz8P/tiF/N3
AgAAAAAAAACuVnoSfjZANtOUvhRrUVRU9NVXX/Xp0yc2NtbpdOpNKXp/eFhY
WOPGjT///PNTp0653W7/+ZPh/9lYOAAAAAAAAAAAF4UKwyX6loXqS7GcPHny
888/f/nllwcMGNCuXbuYmJgqVapIDB4WULVqVesYGxs7cuTItLS0LVu2FBQU
+H9grvtcuUr/oQAAAAAAAACAq1RQEq6qUeS8LAzDOH78+I4dO/7617+2bdtW
TYPb7faghaV+/frDhg07dOiQuqx0pJyrINQ/HQAAAAAAAABw5dPbUVQA7vP5
jACVilsLaRHftm3bc88916VLl5SUlGuuuUaVh6swXM60a9du1qxZGRkZhYWF
ciPrCmc1eh4uL0P7HAAAAAAAAAAAV6qgHTN9Pp+k02aAFKRYC3mP9X7DMI4d
O7Z9+/bPPvts2LBhiYmJ0hle5XxRUVF16tTp1KnTY489lpaWlpeXZ31WbyPX
w3A5KWE4E+MAAAAAAAAAgItObwX3er1qr0wZCFez3GptfcR6T2lp6fz581u3
bi1D4HKUsXDVneJ0OmvUqDF48ODVq1efPHlSLqiH4UJF7mpEXIT6wQAAAAAA
AAAArhx6S4l1lC4UFYCf/QFFRUWbN2+eM2fO2LFjb7311qoBkoFLGC7HevXq
9enT58UXX7TemZGRUVxcrMbO9d4Vua++oFQcAAAAAAAAAHCxBKXNqjPcWgeV
mehJuITYXq933759zz//vMTgkn6r/nBZREREJCYmtmvX7o9//GN2drYvQI2X
yxeQPFwaWgzDkLl0fYacPBwAAAAAAAAA8HPoIbOeOZ+rQG8vkUKVM2fObN26
ddKkSampqXFxcXptuL6OiIjo1q3bW2+9tWnTppKSEulFkbFwPfRWu3Yq+p9C
83QAAAAAAAAAAFeEC+bMFRNyFYZLg4q89Hg8hw8f/vzzz2+66SY1HK5icDUi
7nQ6ExIS+vfvv3btWpfLpYbD5S6GYVgv3W63KmapmJBX3uMAAAAAAAAAAFxx
/mUS7j8/DPcHZsLVlprWIjc3d+bMmUOHDu3Vq1fLli1lJlzF4Mr1118/ZsyY
VatW5eTklJaWWh+UIXB1zaBiFpJwAAAAAAAAAEAlUwUmfi0qtxZut/vUqVP7
9+9fs2bNSy+9VK1aNb0dJSxAsnFLYmJix44dx48fn5ubK63g/kBFuXVU6bo+
GU47CgAAAAAAAACgkskItz8QXMtCzXIbhrFhwwaZDG/QoEGNGjXsdrteliKD
4tWqVevdu/f//M//nDp1SjrDJRKXbTQrJuGh+qUAAAAAAAAAgCvJT5q7lhFu
IfG1fNw67/V6MzIyVq5c+fbbb3fr1i0qKkofDrfZbGobzcaNG/fp0+ell15a
vny5hOp66QoD4QAAAAAAAACAy41E1nqj+LRp05KTk8PDw6tUqWK32yUDV2G4
tYiOjk5JSRk7duyxY8dkI07JwP2BVNw6oxLyEP82AAAAAAAAAAAC1GS4YRjW
Yt++fenp6X/84x8HDRpUv359u92ux+CysabD4WjSpMnTTz/91ltvLViw4NCh
Q6ZpejwelaszFg4AAAAAAAAAuHyo1hS18aVhGKWlpVlZWQMGDNB30rTZbLKH
pryMjY1t2LDhrbfe+sknn3i9Xkm/pUJcLigdLAAAAAAAAAAAhJbUmEgeLsUm
pmlaL8+cOTNv3ryxY8d26tQpOjra4XBIbbhKxWVtnR80aFB6evq2bdv27t3r
crn8WjUKk+EAAAAAAAAAgMuB9JnI3pfW2jAM6+j1ek+cOHH48OEpU6Y0adJE
dYarMFytY2Njmzdv3rt37yeffDIjI0NaVlT3eKh/HAAAAAAAAADgqqbvaynd
JkaA2+1Wb9i2bduUKVP69u3bpUuXhg0bRkREqAzcOqqE3FK3bt2PP/44NzfX
5XJZV6iYhBOMAwAAAAAAAABCRVq+ywLkpWEYUvpdVFSUk5Ozffv2zz//fMCA
AbGxsdKOIhtoqkjcUrVq1datWz/wwAMTJkz44osvjh49qm+dyZQ4AAAAAAAA
ACAkJJqW0LusrMwXIJtdSjAu3SnSHP7+++/36NGjZcuWSUlJ4eHhspmm3pei
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
    "], {{0, 904}, {1966, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{482.74285714286043`, Automatic},
  ImageSizeRaw->{1966, 904},
  PlotRange->{{0, 1966}, {0, 904}}]], "DisplayFormula"],

Cell[CellGroupData[{

Cell["a)", "Section"],

Cell[CellGroupData[{

Cell["Impact parameter", "Subsection"],

Cell[TextData[StyleBox["From the figure cos(i) = b r /a",
 FontWeight->"Bold"]], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Time taken", "Subsection"],

Cell[TextData[StyleBox["Dividing width of chord by velocity:",
 FontWeight->"Bold"]], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2", 
  RowBox[{
   RowBox[{"Sqrt", "[", 
    RowBox[{
     RowBox[{"r", "^", "2"}], "-", 
     RowBox[{
      RowBox[{"b", "^", "2"}], 
      RowBox[{"r", "^", "2"}]}]}], "]"}], "/", 
   RowBox[{"(", 
    RowBox[{"2", "\[Pi]", " ", 
     RowBox[{"a", "/", "\[Tau]"}]}], ")"}]}]}]], "Input"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SqrtBox[
    RowBox[{
     SuperscriptBox["r", "2"], "-", 
     RowBox[{
      SuperscriptBox["b", "2"], " ", 
      SuperscriptBox["r", "2"]}]}]], " ", "\[Tau]"}], 
  RowBox[{"a", " ", "\[Pi]"}]]], "Output"]
}, Open  ]],

Cell[TextData[StyleBox["This is equivalent to the given equation.",
 FontWeight->"Bold"]], "Text"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["b)", "Section"],

Cell[CellGroupData[{

Cell["Transit criterion", "Subsection"],

Cell[TextData[StyleBox["Distance to projection on plane of sky is less than \
sum of radii: a cos(i) < rS+rP",
 FontWeight->"Bold"]], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Probability for eclipse", "Subsection"],

Cell[TextData[StyleBox["Taking ratio of solid angles:",
 FontWeight->"Bold"]], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2", "\[Pi]", " ", 
  RowBox[{
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"Sin", "[", "\[Theta]", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Theta]", ",", 
       RowBox[{"ArcCos", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"rS", "+", "rP"}], ")"}], "/", "a"}], "]"}], ",", 
       RowBox[{"\[Pi]", "-", 
        RowBox[{"ArcCos", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"rS", "+", "rP"}], ")"}], "/", "a"}], "]"}]}]}], "}"}]}], 
    "]"}], "/", 
   RowBox[{"(", 
    RowBox[{"4", "\[Pi]"}], ")"}]}]}]], "Input"],

Cell[BoxData[
 FractionBox[
  RowBox[{"rP", "+", "rS"}], "a"]], "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["c)", "Section"],

Cell[CellGroupData[{

Cell["Transition depth", "Subsection"],

Cell[TextData[StyleBox["Approximately .00025 from figure.",
 FontWeight->"Bold"]], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Radius of star relative to Earth\[CloseCurlyQuote]s radius", \
"Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rP1", "=", 
  RowBox[{"UnitConvert", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{
        RowBox[{".00025", "==", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"rP", "/", "rS"}], ")"}], "^", "2"}]}], "/.", 
        RowBox[{"rS", "\[Rule]", 
         TemplateBox[{"0.91",SubsuperscriptBox[
            StyleBox["\"\[ScriptCapitalR]\"", Italic, StripOnInput -> False], 
            "\"\[Sun]\"", 
            StyleBox["\"N\"", Italic, StripOnInput -> False]],
           "nominal solar radii","\"NominalSolarRadius\""},
          "Quantity"]}]}], ",", "rP"}], "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"2", ",", "1", ",", "2"}], "]"}], "]"}], ",", 
    "\"\<EarthMeanRadius\>\""}], "]"}]}]], "Input"],

Cell[BoxData[
 TemplateBox[{"1.5711772969478703`",SubscriptBox[
    StyleBox["\"R\"", Italic, StripOnInput -> False], "1"],
   "mean radii of Earth","\"EarthMeanRadius\""},
  "Quantity"]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Orbital period", "Subsection"],

Cell[TextData[StyleBox["From the figure the orbital period is approximately \
4.5 days.",
 FontWeight->"Bold"]], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Separation", "Subsection"],

Cell[TextData[StyleBox["Using Kepler\[CloseCurlyQuote]s 3rd law:",
 FontWeight->"Bold"]], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a1", "=", 
  RowBox[{"UnitConvert", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        TemplateBox[{"4.5","\"days\"","days","\"Days\""},
         "Quantity"], "^", "2"}], "  ", 
       TemplateBox[{
        InterpretationBox["\[InvisibleSpace]", 1],StyleBox[
         "\"G\"", Italic, StripOnInput -> False],
         "Newtonian gravitational constants","\"GravitationalConstant\""},
        "Quantity"], 
       RowBox[{
        TemplateBox[{"0.91",SubscriptBox[
           StyleBox["\"M\"", Italic, StripOnInput -> False], "\"\[Sun]\""],
          "solar masses","\"SolarMass\""},
         "Quantity"], "/", 
        RowBox[{"(", 
         RowBox[{"4", 
          RowBox[{"\[Pi]", "^", "2"}]}], ")"}]}]}], ")"}], "^", 
     RowBox[{"(", 
      RowBox[{"1", "/", "3"}], ")"}]}], ",", "\"\<AU\>\""}], "]"}]}]], "Input"],

Cell[BoxData[
 TemplateBox[{
  "0.05169163229282677`","\"au\"","astronomical units","\"AstronomicalUnit\""},
  "Quantity"]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Transit time", "Subsection"],

Cell["From the figure, the duration of the transit is .03 days", "Text",
 FontWeight->"Bold"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Duration of flat", "Subsection"],

Cell[TextData[StyleBox["From the figure, the duration of the flat part is .02 \
days",
 FontWeight->"Bold"]], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Impact parameter", "Subsection"],

Cell[TextData[StyleBox["Using the formula in Q2 b):",
 FontWeight->"Bold"]], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"b1", "=", 
  RowBox[{
   RowBox[{
    FractionBox["1", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["t", "Flat"], "-", 
        SubscriptBox["t", "Total"]}], ")"}], "2"]], 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox[
       SubscriptBox["t", "Flat"], "2"], "-", 
      RowBox[{
       SuperscriptBox[
        SubscriptBox["t", "Flat"], "2"], " ", "tDepth"}], "-", 
      RowBox[{"2", " ", 
       SubscriptBox["t", "Flat"], " ", 
       SubscriptBox["t", "Total"]}], "-", 
      RowBox[{"2", " ", 
       SubscriptBox["t", "Flat"], " ", "tDepth", " ", 
       SubscriptBox["t", "Total"]}], "+", 
      SuperscriptBox[
       SubscriptBox["t", "Total"], "2"], "-", 
      RowBox[{"tDepth", " ", 
       SuperscriptBox[
        SubscriptBox["t", "Total"], "2"]}]}], ")"}]}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"tDepth", "\[Rule]", ".00025"}], ",", 
     RowBox[{
      SubscriptBox["t", "Flat"], "->", 
      TemplateBox[{"0.02","\"days\"","days","\"Days\""},
       "Quantity"]}], ",", 
     RowBox[{
      SubscriptBox["t", "Total"], "->", 
      TemplateBox[{"0.03","\"days\"","days","\"Days\""},
       "Quantity"]}]}], "}"}]}]}]], "Input"],

Cell[BoxData["0.993750000000001`"], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Inclination angle", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ArcCos", "[", 
   RowBox[{"b1", " ", 
    RowBox[{
     TemplateBox[{"0.92",SubsuperscriptBox[
        StyleBox["\"\[ScriptCapitalR]\"", Italic, StripOnInput -> False], 
        "\"\[Sun]\"", 
        StyleBox["\"N\"", Italic, StripOnInput -> False]],
       "nominal solar radii","\"NominalSolarRadius\""},
      "Quantity"], "/", "a1"}]}], "]"}], "/", "Degree"}]], "Input"],

Cell[BoxData["85.28203353733534`"], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Mass of planet", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mP1", "=", 
  RowBox[{"UnitConvert", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"mP", " ", "vP"}], " ", "\[Equal]", " ", 
         RowBox[{"mS", " ", "vS"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"vP", "\[Rule]", 
           RowBox[{"2", "\[Pi]", " ", 
            RowBox[{"a1", "/", 
             TemplateBox[{"4.5","\"days\"","days","\"Days\""},
              "Quantity"]}]}]}], ",", 
          RowBox[{"vS", "\[Rule]", " ", 
           
           TemplateBox[{
            "1.6",RowBox[{
              "\"m\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
               "\"s\""}],"meters per second",FractionBox[
             "\"Meters\"", "\"Seconds\""]},
            "Quantity"]}], ",", 
          RowBox[{"mS", "->", 
           TemplateBox[{"0.91",SubscriptBox[
              StyleBox["\"M\"", Italic, StripOnInput -> False], "\"\[Sun]\""],
             "solar masses","\"SolarMass\""},
            "Quantity"]}]}], "}"}]}], ",", "mP"}], "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "1", ",", "2"}], "]"}], "]"}], ",", 
    "\"\<EarthMass\>\""}], "]"}]}]], "Input"],

Cell[BoxData[
 TemplateBox[{"3.8791740157409182`",SubscriptBox[
    StyleBox["\"M\"", Italic, StripOnInput -> False], "\"\[Earth]\""],
   "Earth masses","\"EarthMass\""},
  "Quantity"]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Density of the planet", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnitConvert", "[", 
  RowBox[{
   RowBox[{"mP1", "/", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"4", "/", "3"}], "\[Pi]", " ", 
      RowBox[{"rP1", "^", "3"}]}], ")"}]}], ",", 
   TemplateBox[{
    InterpretationBox["\[InvisibleSpace]", 1],
     RowBox[{"\"g\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
       SuperscriptBox["\"cm\"", "3"]}],"grams per centimeter cubed",
     FractionBox["\"Grams\"", 
      SuperscriptBox["\"Centimeters\"", "3"]]},
    "Quantity"]}], "]"}]], "Input"],

Cell[BoxData[
 TemplateBox[{
  "5.51422768108931`",
   RowBox[{"\"g\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
     SuperscriptBox["\"cm\"", "3"]}],"grams per centimeter cubed",FractionBox[
   "\"Grams\"", 
    SuperscriptBox["\"Centimeters\"", "3"]]},
  "Quantity"]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Temperature of planet", "Subsection"],

Cell[TextData[StyleBox["Assuming the planet is a perfect black-body:",
 FontWeight->"Bold"]], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"NSolve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"4", "\[Pi]", " ", 
       RowBox[{"r", "^", "2"}], " ", "\[Sigma]", " ", 
       RowBox[{
        RowBox[{"T", "^", "4"}], "/", 
        RowBox[{"(", 
         RowBox[{"4", "\[Pi]", " ", 
          RowBox[{"a", "^", "2"}]}], ")"}]}], "\[Pi]", " ", 
       RowBox[{"rP", "^", "2"}], " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", "A"}], ")"}]}], "\[Equal]", 
      RowBox[{"4", "\[Pi]", " ", 
       RowBox[{"rP", "^", "2"}], " ", "\[Sigma]", " ", 
       RowBox[{"Tp", "^", "4"}]}]}], "/.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"rP", "\[Rule]", "rP1"}], ",", 
       RowBox[{"T", "->", 
        TemplateBox[{"5700","\"K\"","kelvins","\"Kelvins\""},
         "Quantity"]}], ",", 
       RowBox[{"a", "\[Rule]", "a1"}], ",", 
       RowBox[{"r", "->", 
        TemplateBox[{"0.92",SubsuperscriptBox[
           StyleBox["\"\[ScriptCapitalR]\"", Italic, StripOnInput -> False], 
           "\"\[Sun]\"", 
           StyleBox["\"N\"", Italic, StripOnInput -> False]],
          "nominal solar radii","\"NominalSolarRadius\""},
         "Quantity"]}], ",", 
       RowBox[{"A", "\[Rule]", ".3"}]}], "}"}]}], ",", "Tp"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{
    RowBox[{"-", "1"}], ",", "1"}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Tp", "\[Rule]", 
  TemplateBox[{"1060.6362202875207`","\"K\"","kelvins","\"Kelvins\""},
   "Quantity"]}]], "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Q2)", "Chapter"],

Cell[CellGroupData[{

Cell["a)", "Section"],

Cell[CellGroupData[{

Cell["Solving for upper limit of \[Rho]", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["t", "dur"], "==", 
      FractionBox[
       RowBox[{"r", " ", "\[Tau]"}], 
       RowBox[{"\[Pi]", " ", "a"}]]}], "/.", 
     RowBox[{"a", "\[Rule]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"\[Tau]", "^", "2"}], "  ", "G", " ", "\[Rho]", " ", 
         RowBox[{"4", "/", "3"}], " ", "\[Pi]", " ", 
         RowBox[{
          RowBox[{"r", "^", "3"}], "/", 
          RowBox[{"(", 
           RowBox[{"4", 
            RowBox[{"\[Pi]", "^", "2"}]}], ")"}]}]}], ")"}], "^", 
       RowBox[{"(", 
        RowBox[{"1", "/", "3"}], ")"}]}]}]}], ",", "\[Rho]"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "1"}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"\[Rho]", "\[Rule]", 
  FractionBox[
   RowBox[{"3", " ", "\[Tau]"}], 
   RowBox[{"G", " ", 
    SuperscriptBox["\[Pi]", "2"], " ", 
    SubsuperscriptBox["t", "dur", "3"]}]]}]], "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["b)", "Section"],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 FormBox[
  SubscriptBox["t", "Total"], TraditionalForm]],
 FormatType->"TraditionalForm"]], "Subsection"],

Cell[TextData[StyleBox["Let v and rP be the velocity and radius of the \
planet, then the total time of contact is the time taken to travel a distance \
of the chord plus twice the radius of the planet. Also let b2 = b^2, then:",
 FontWeight->"Bold"]], "Text"],

Cell[BoxData[
 RowBox[{"eqT", ":=", 
  RowBox[{
   SubscriptBox["t", "Total"], " ", "==", " ", 
   RowBox[{"v", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", 
       RowBox[{"Sqrt", "[", 
        RowBox[{
         RowBox[{"r", "^", "2"}], "-", 
         RowBox[{
          RowBox[{"r", "^", "2"}], "b2"}]}], "]"}]}], "+", 
      RowBox[{"2", "rP"}]}], ")"}]}]}]}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 FormBox[
  SubscriptBox["t", "Flat"], TraditionalForm]],
 FormatType->"TraditionalForm"]], "Subsection"],

Cell[TextData[StyleBox["The time of the flat part is the time taken to travel \
the distance of the chord minus twice the radius of the planet.",
 FontWeight->"Bold"]], "Text"],

Cell[BoxData[
 RowBox[{"eqF", ":=", 
  RowBox[{
   SubscriptBox["t", "Flat"], "==", 
   RowBox[{"v", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", 
       RowBox[{"Sqrt", "[", 
        RowBox[{
         RowBox[{"r", "^", "2"}], "-", 
         RowBox[{
          RowBox[{"r", "^", "2"}], "b2"}]}], "]"}]}], "-", 
      RowBox[{"2", "rP"}]}], ")"}]}]}]}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Transit depth (tDepth)", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"srP", "=", 
  RowBox[{
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{"tDepth", "==", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"rP", "/", "r"}], ")"}], "^", "2"}]}], ",", "rP"}], "]"}], 
   "[", 
   RowBox[{"[", 
    RowBox[{"2", ",", "1"}], "]"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"rP", "\[Rule]", 
  RowBox[{"r", " ", 
   SqrtBox["tDepth"]}]}]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Solving for ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["b", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sb2", "=", 
  RowBox[{
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"eqF", ",", "eqT"}], "}"}], "/.", "srP"}], ",", 
     RowBox[{"{", 
      RowBox[{"b2", ",", "v"}], "}"}]}], "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"1", ",", "1"}], "]"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"b2", "\[Rule]", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     SubsuperscriptBox["t", "Flat", "2"], "-", 
     RowBox[{"tDepth", " ", 
      SubsuperscriptBox["t", "Flat", "2"]}], "-", 
     RowBox[{"2", " ", 
      SubscriptBox["t", "Flat"], " ", 
      SubscriptBox["t", "Total"]}], "-", 
     RowBox[{"2", " ", "tDepth", " ", 
      SubscriptBox["t", "Flat"], " ", 
      SubscriptBox["t", "Total"]}], "+", 
     SubsuperscriptBox["t", "Total", "2"], "-", 
     RowBox[{"tDepth", " ", 
      SubsuperscriptBox["t", "Total", "2"]}]}], ")"}], "/", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["t", "Flat"], "-", 
      SubscriptBox["t", "Total"]}], ")"}], "2"]}]}]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solving for \[Rho] and substituting above", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Solve", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          SubscriptBox["t", "dur"], "==", 
          FractionBox[
           RowBox[{"r", " ", 
            RowBox[{"Sqrt", "[", 
             RowBox[{"1", "-", "b2"}], "]"}], " ", "\[Tau]"}], 
           RowBox[{"\[Pi]", " ", "a"}]]}], "/.", 
         RowBox[{"a", "\[Rule]", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Tau]", "^", "2"}], "  ", "G", " ", "\[Rho]", " ", 
             RowBox[{"4", "/", "3"}], " ", "\[Pi]", " ", 
             RowBox[{
              RowBox[{"r", "^", "3"}], "/", 
              RowBox[{"(", 
               RowBox[{"4", 
                RowBox[{"\[Pi]", "^", "2"}]}], ")"}]}]}], ")"}], "^", 
           RowBox[{"(", 
            RowBox[{"1", "/", "3"}], ")"}]}]}]}], ",", "\[Rho]"}], "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}], "/.", "sb2"}], "//", 
    "FullSimplify"}], "//", "PowerExpand"}], "//", "FullSimplify"}]], "Input"],

Cell[BoxData[
 RowBox[{"\[Rho]", "\[Rule]", 
  FractionBox[
   RowBox[{"3", " ", 
    SuperscriptBox["tDepth", 
     RowBox[{"3", "/", "2"}]], " ", "\[Tau]", " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["t", "Flat"], "+", 
       SubscriptBox["t", "Total"]}], ")"}], "3"]}], 
   RowBox[{"G", " ", 
    SuperscriptBox["\[Pi]", "2"], " ", 
    SubsuperscriptBox["t", "dur", "3"], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["t", "Flat"], "-", 
       SubscriptBox["t", "Total"]}], ")"}], "3"]}]]}]], "Output"]
}, Open  ]],

Cell[TextData[StyleBox["Thus \[Rho] can be found exactly.",
 FontWeight->"Bold"]], "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Q3)", "Chapter"],

Cell[CellGroupData[{

Cell["Einstein radius formula", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dE", "=", 
  RowBox[{"Sqrt", "[", 
   RowBox[{"4", " ", 
    TemplateBox[{
     InterpretationBox["\[InvisibleSpace]", 1],StyleBox[
      "\"G\"", Italic, StripOnInput -> False],
      "Newtonian gravitational constants","\"GravitationalConstant\""},
     "Quantity"], 
    RowBox[{"M", "/", 
     TemplateBox[{InterpretationBox["\[InvisibleSpace]", 1],RowBox[{
         SuperscriptBox[
          StyleBox["\"c\"", Italic, StripOnInput -> False], "2"]}],
       "speed of light in vacuum squared",SuperscriptBox[
       "\"SpeedOfLight\"", "2"]},
      "Quantity"]}], " ", 
    RowBox[{"d", "/", 
     RowBox[{"(", 
      RowBox[{"d", " ", "2", "d"}], ")"}]}]}], "]"}]}]], "Input"],

Cell[BoxData[
 SqrtBox[
  FractionBox[
   RowBox[{"M", " ", 
    RowBox[{"(", 
     TemplateBox[{"2",RowBox[{
         StyleBox["\"G\"", Italic, StripOnInput -> False], 
         "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
         SuperscriptBox[
          StyleBox["\"c\"", Italic, StripOnInput -> False], "2"]}],
       "Newtonian gravitational constants per speed of light in vacuum \
squared",FractionBox["\"GravitationalConstant\"", 
        SuperscriptBox["\"SpeedOfLight\"", "2"]]},
      "Quantity"], ")"}]}], "d"]]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Equating to solar radius and solving for d", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnitConvert", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"NSolve", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         NamespaceBox["LinguisticAssistant",
          
          DynamicModuleBox[{Typeset`query$$ = "sun radius", Typeset`boxes$$ = 
           RowBox[{
             TemplateBox[{"\"Sun\"", 
               RowBox[{"Entity", "[", 
                 RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
               "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""}, 
              "Entity"], "[", "\"Radius\"", "]"}], 
           Typeset`allassumptions$$ = {{
            "type" -> "MultiClash", "word" -> "", "template" -> 
             "Assuming ${word1} is referring to ${desc1}. Use \"${word2}\" as \
${desc2}.", "count" -> "2", 
             "Values" -> {{
               "name" -> "Star", "word" -> "sun", "desc" -> 
                " referring to stars", "input" -> "*MC.sun+radius-_*Star-"}, {
               "name" -> "Unit", "word" -> "sun radius", "desc" -> "a unit", 
                "input" -> "*MC.sun+radius-_*Unit-"}}}}, 
           Typeset`assumptions$$ = {}, Typeset`open$$ = {1}, 
           Typeset`querystate$$ = {
           "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
            0.7369632`7.318990795553184, "Messages" -> {}}}, 
           DynamicBox[ToBoxes[
             AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
              Dynamic[Typeset`query$$], 
              Dynamic[Typeset`boxes$$], 
              Dynamic[Typeset`allassumptions$$], 
              Dynamic[Typeset`assumptions$$], 
              Dynamic[Typeset`open$$], 
              Dynamic[Typeset`querystate$$]], StandardForm],
            ImageSizeCache->{102., {9., 21.}},
            
            TrackedSymbols:>{
             Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
              Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
           DynamicModuleValues:>{},
           UndoTrackedVariables:>{Typeset`open$$}],
          BaseStyle->{"Deploy"},
          DeleteWithContents->True,
          Editable->False,
          SelectWithContents->True], "/", "d"}], "\[Equal]", "dE"}], "/.", 
       RowBox[{"M", "->", 
        NamespaceBox["LinguisticAssistant",
         DynamicModuleBox[{Typeset`query$$ = "sun mass", Typeset`boxes$$ = 
          RowBox[{
            TemplateBox[{"\"Sun\"", 
              RowBox[{"Entity", "[", 
                RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
              "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""}, "Entity"],
             "[", "\"Mass\"", "]"}], 
          Typeset`allassumptions$$ = {{
           "type" -> "Clash", "word" -> "sun", "template" -> 
            "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", 
            "count" -> "2", 
            "Values" -> {{
              "name" -> "Star", "desc" -> " referring to stars", "input" -> 
               "*C.sun-_*Star-"}, {
              "name" -> "CalendarEventName", "desc" -> "a weekday", "input" -> 
               "*C.sun-_*CalendarEventName-"}}}}, Typeset`assumptions$$ = {}, 
          Typeset`open$$ = {1}, Typeset`querystate$$ = {
          "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
           0.7239246`7.311238328326839, "Messages" -> {}}}, 
          DynamicBox[ToBoxes[
            AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
             Dynamic[Typeset`query$$], 
             Dynamic[Typeset`boxes$$], 
             Dynamic[Typeset`allassumptions$$], 
             Dynamic[Typeset`assumptions$$], 
             Dynamic[Typeset`open$$], 
             Dynamic[Typeset`querystate$$]], StandardForm],
           ImageSizeCache->{95., {9., 21.}},
           
           TrackedSymbols:>{
            Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
             Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
          DynamicModuleValues:>{},
          UndoTrackedVariables:>{Typeset`open$$}],
         BaseStyle->{"Deploy"},
         DeleteWithContents->True,
         Editable->False,
         SelectWithContents->True]}]}], ",", "d"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "1", ",", "2"}], "]"}], "]"}], ",", 
   "\"\<Parsecs\>\""}], "]"}]], "Input"],

Cell[BoxData[
 TemplateBox[{"0.0053115512736425385`4.","\"pc\"","parsecs","\"Parsecs\""},
  "Quantity"]], "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Q4)", "Chapter"],

Cell[CellGroupData[{

Cell["a)", "Section"],

Cell[CellGroupData[{

Cell["Electrostatic energy density", "Subsection"],

Cell[TextData[StyleBox["PE of an atom (due to 6 neighbors) divided by volume \
of a cube of side r:",
 FontWeight->"Bold"]], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EED", "=", 
  RowBox[{
   RowBox[{"6", "/", 
    RowBox[{"(", 
     RowBox[{"4", "\[Pi]", 
      TemplateBox[{
       InterpretationBox["\[InvisibleSpace]", 1],SubscriptBox[
        "\"\[CurlyEpsilon]\"", "0"],"electric constants",
        "\"ElectricConstant\""},
       "Quantity"]}], ")"}]}], 
   RowBox[{
    RowBox[{
     RowBox[{
      TemplateBox[{
       "1",StyleBox["\"e\"", Italic, StripOnInput -> False],
        "elementary charges","\"ElementaryCharge\""},
       "Quantity"], "^", "2"}], " ", "/", "r"}], "/", 
    RowBox[{"r", "^", "3"}]}]}]}]], "Input"],

Cell[BoxData[
 FractionBox[
  TemplateBox[{FractionBox["3", 
     RowBox[{"2", " ", "\[Pi]"}]],RowBox[{
      SuperscriptBox[
       StyleBox["\"e\"", Italic, StripOnInput -> False], "2"], 
      "\[NegativeMediumSpace]", "\"/\"", "\[InvisibleSpace]", 
      SubscriptBox["\"\[CurlyEpsilon]\"", "0"]}],
    "elementary charges squared per electric constant",FractionBox[
     SuperscriptBox["\"ElementaryCharge\"", "2"], "\"ElectricConstant\""]},
   "Quantity"], 
  SuperscriptBox["r", "4"]]], "Output"]
}, Open  ]],

Cell[TextData[StyleBox["This is true because on average there is one atom per \
cube.",
 FontWeight->"Bold"]], "Text"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["b)", "Section"],

Cell[CellGroupData[{

Cell["Radius of the planet", "Subsection"],

Cell[TextData[StyleBox["Equating the number of atoms and solving for R:",
 FontWeight->"Bold"]], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sR", "=", 
  RowBox[{
   RowBox[{"NSolve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"M", "/", 
       TemplateBox[{InterpretationBox["\[InvisibleSpace]", 1],SubscriptBox[
          StyleBox["\"m\"", Italic, StripOnInput -> False], 
          StyleBox["\"p\"", Plain, StripOnInput -> False]],"proton masses",
         "\"ProtonMass\""},
        "Quantity"]}], "\[Equal]", 
      RowBox[{
       RowBox[{"4", "/", "3"}], "\[Pi]", " ", 
       RowBox[{
        RowBox[{"R", "^", "3"}], "/", 
        RowBox[{"r", "^", "3"}]}]}]}], ",", "R"}], "]"}], 
   "\[LeftDoubleBracket]", 
   RowBox[{
    RowBox[{"-", "1"}], ",", "1"}], "\[RightDoubleBracket]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"R", "\[Rule]", 
  RowBox[{"5.226021644942352636579788622`7.299118492216323*^8", " ", "r", " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"M", " ", 
      RowBox[{"(", 
       TemplateBox[{
        "1",RowBox[{"\"/\"", "\[InvisibleSpace]", "\"kg\""}],
         "reciprocal kilograms",FractionBox["1", "\"Kilograms\""]},
        "QuantityPostfix"], ")"}]}], ")"}], 
    RowBox[{"1", "/", "3"}]]}]}]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Gravitational energy density", "Subsection"],

Cell[TextData[StyleBox["Substituting for R from above:",
 FontWeight->"Bold"]], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GED", "=", " ", 
  RowBox[{
   RowBox[{
    TemplateBox[{
     InterpretationBox["\[InvisibleSpace]", 1],StyleBox[
      "\"G\"", Italic, StripOnInput -> False],
      "Newtonian gravitational constants","\"GravitationalConstant\""},
     "Quantity"], " ", 
    RowBox[{
     RowBox[{
      RowBox[{"M", "^", "2"}], "/", "R"}], "/", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"4", "/", "3"}], "\[Pi]", " ", 
       RowBox[{"R", "^", "3"}]}], ")"}]}]}], "/.", "sR"}]}]], "Input"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["M", "2"], " ", 
   RowBox[{"(", 
    TemplateBox[{
     "3.2005644286198708749482`6.69705850088836*^-36",StyleBox[
      "\"G\"", Italic, StripOnInput -> False],
      "Newtonian gravitational constants","\"GravitationalConstant\""},
     "Quantity"], ")"}]}], 
  RowBox[{
   SuperscriptBox["r", "4"], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"M", " ", 
      RowBox[{"(", 
       TemplateBox[{
        "1",RowBox[{"\"/\"", "\[InvisibleSpace]", "\"kg\""}],
         "reciprocal kilograms",FractionBox["1", "\"Kilograms\""]},
        "QuantityPostfix"], ")"}]}], ")"}], 
    RowBox[{"4", "/", "3"}]]}]]], "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["c)", "Section"],

Cell[CellGroupData[{

Cell["Equating the two and solving for M", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"M", "->", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{"EED", "\[Equal]", "GED"}], ",", "M"}], "]"}], 
     "\[LeftDoubleBracket]", 
     RowBox[{"1", ",", "1", ",", "2"}], "\[RightDoubleBracket]"}], "/", 
    TemplateBox[{"0.001",SubscriptBox[
       StyleBox["\"M\"", Italic, StripOnInput -> False], "\"\[Sun]\""],
      "solar masses","\"SolarMass\""},
     "Quantity"]}], 
   "\"\<\!\(\*SubscriptBox[\(M\), \(Jupiter\)]\)\>\""}]}]], "Input"],

Cell[BoxData[
 RowBox[{"M", "\[Rule]", 
  RowBox[{
  "8.296249081893134`", 
   " ", "\<\"\\!\\(\\*SubscriptBox[\\(M\\), \\(Jupiter\\)]\\)\"\>"}]}]], \
"Output"]
}, Open  ]],

Cell[TextData[StyleBox["The dependence on r cancels out because both forces \
follow the same power law.",
 FontWeight->"Bold"]], "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Q5)", "Chapter"],

Cell[CellGroupData[{

Cell["a)", "Section"],

Cell[CellGroupData[{

Cell["Kinetic energy", "Subsection"],

Cell[TextData[StyleBox["Equal to negative of PE due to Sun and Earth",
 FontWeight->"Bold"]], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"kE", "=", 
  RowBox[{
   RowBox[{
    TemplateBox[{
     InterpretationBox["\[InvisibleSpace]", 1],StyleBox[
      "\"G\"", Italic, StripOnInput -> False],
      "Newtonian gravitational constants","\"GravitationalConstant\""},
     "Quantity"], 
    RowBox[{"4", "/", "3"}], "\[Pi]", " ", 
    RowBox[{
     TemplateBox[{"4","\"km\"","kilometers","\"Kilometers\""},
      "Quantity"], "^", "3"}], " ", 
    NamespaceBox["LinguisticAssistant",
     DynamicModuleBox[{Typeset`query$$ = "ice density", Typeset`boxes$$ = 
      TemplateBox[{"916.9", 
        RowBox[{"\"kg\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
          SuperscriptBox["\"m\"", "3"]}], "kilograms per meter cubed", 
        FractionBox["\"Kilograms\"", 
         SuperscriptBox["\"Meters\"", "3"]]}, "Quantity", SyntaxForm -> Mod], 
      Typeset`allassumptions$$ = {{
       "type" -> "Clash", "word" -> "ice", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
        "3", "Values" -> {{
          "name" -> "Chemical", "desc" -> "a chemical compound", "input" -> 
           "*C.ice-_*Chemical-"}, {
          "name" -> "Mineral", "desc" -> "a mineral", "input" -> 
           "*C.ice-_*Mineral-"}, {
          "name" -> "FoodType", "desc" -> "a food type", "input" -> 
           "*C.ice-_*FoodType-"}}}}, Typeset`assumptions$$ = {}, 
      Typeset`open$$ = {1}, Typeset`querystate$$ = {
      "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
       0.9214507`7.416017097792562, "query.jsp" -> 
       1.991296`7.7506808148552775, "Messages" -> {}}}, 
      DynamicBox[ToBoxes[
        AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
         Dynamic[Typeset`query$$], 
         Dynamic[Typeset`boxes$$], 
         Dynamic[Typeset`allassumptions$$], 
         Dynamic[Typeset`assumptions$$], 
         Dynamic[Typeset`open$$], 
         Dynamic[Typeset`querystate$$]], StandardForm],
       ImageSizeCache->{105., {9., 21.}},
       TrackedSymbols:>{
        Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
         Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
      DynamicModuleValues:>{},
      UndoTrackedVariables:>{Typeset`open$$}],
     BaseStyle->{"Deploy"},
     DeleteWithContents->True,
     Editable->False,
     SelectWithContents->True], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       NamespaceBox["LinguisticAssistant",
        DynamicModuleBox[{Typeset`query$$ = "sun mass", Typeset`boxes$$ = 
         RowBox[{
           TemplateBox[{"\"Sun\"", 
             RowBox[{"Entity", "[", 
               RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
             "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""}, "Entity"], 
           "[", "\"Mass\"", "]"}], 
         Typeset`allassumptions$$ = {{
          "type" -> "Clash", "word" -> "sun", "template" -> 
           "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", 
           "count" -> "2", 
           "Values" -> {{
             "name" -> "Star", "desc" -> " referring to stars", "input" -> 
              "*C.sun-_*Star-"}, {
             "name" -> "CalendarEventName", "desc" -> "a weekday", "input" -> 
              "*C.sun-_*CalendarEventName-"}}}}, Typeset`assumptions$$ = {}, 
         Typeset`open$$ = {1}, Typeset`querystate$$ = {
         "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
          0.8933468`7.402565079583019, "Messages" -> {}}}, 
         DynamicBox[ToBoxes[
           AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
            Dynamic[Typeset`query$$], 
            Dynamic[Typeset`boxes$$], 
            Dynamic[Typeset`allassumptions$$], 
            Dynamic[Typeset`assumptions$$], 
            Dynamic[Typeset`open$$], 
            Dynamic[Typeset`querystate$$]], StandardForm],
          ImageSizeCache->{95., {9., 21.}},
          
          TrackedSymbols:>{
           Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
            Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
         DynamicModuleValues:>{},
         UndoTrackedVariables:>{Typeset`open$$}],
        BaseStyle->{"Deploy"},
        DeleteWithContents->True,
        Editable->False,
        SelectWithContents->True], "/", 
       NamespaceBox["LinguisticAssistant",
        DynamicModuleBox[{Typeset`query$$ = "sun distance", Typeset`boxes$$ = 
         RowBox[{
           TemplateBox[{"\"Sun\"", 
             RowBox[{"Entity", "[", 
               RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
             "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""}, "Entity"], 
           "[", "\"DistanceFromEarth\"", "]"}], Typeset`allassumptions$$ = {},
          Typeset`assumptions$$ = {}, Typeset`open$$ = {1}, 
         Typeset`querystate$$ = {
         "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
          3.7950617000000000001`8.03076383453161, "Messages" -> {}}}, 
         DynamicBox[ToBoxes[
           AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
            Dynamic[Typeset`query$$], 
            Dynamic[Typeset`boxes$$], 
            Dynamic[Typeset`allassumptions$$], 
            Dynamic[Typeset`assumptions$$], 
            Dynamic[Typeset`open$$], 
            Dynamic[Typeset`querystate$$]], StandardForm],
          ImageSizeCache->{118., {9., 21.}},
          
          TrackedSymbols:>{
           Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
            Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
         DynamicModuleValues:>{},
         UndoTrackedVariables:>{Typeset`open$$}],
        BaseStyle->{"Deploy"},
        DeleteWithContents->True,
        Editable->False,
        SelectWithContents->True]}], "+", 
      RowBox[{
       NamespaceBox["LinguisticAssistant",
        DynamicModuleBox[{Typeset`query$$ = "earth mass", Typeset`boxes$$ = 
         RowBox[{
           TemplateBox[{"\"Earth\"", 
             RowBox[{"Entity", "[", 
               RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
             "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
            "Entity"], "[", "\"Mass\"", "]"}], Typeset`allassumptions$$ = {}, 
         Typeset`assumptions$$ = {}, Typeset`open$$ = {1}, 
         Typeset`querystate$$ = {
         "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
          0.7439577`7.323093236597179, "Messages" -> {}}}, 
         DynamicBox[ToBoxes[
           AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
            Dynamic[Typeset`query$$], 
            Dynamic[Typeset`boxes$$], 
            Dynamic[Typeset`allassumptions$$], 
            Dynamic[Typeset`assumptions$$], 
            Dynamic[Typeset`open$$], 
            Dynamic[Typeset`querystate$$]], StandardForm],
          ImageSizeCache->{106., {9., 21.}},
          
          TrackedSymbols:>{
           Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
            Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
         DynamicModuleValues:>{},
         UndoTrackedVariables:>{Typeset`open$$}],
        BaseStyle->{"Deploy"},
        DeleteWithContents->True,
        Editable->False,
        SelectWithContents->True], "/", 
       NamespaceBox["LinguisticAssistant",
        DynamicModuleBox[{Typeset`query$$ = "earth radius", Typeset`boxes$$ = 
         RowBox[{
           TemplateBox[{"\"Earth\"", 
             RowBox[{"Entity", "[", 
               RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
             "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
            "Entity"], "[", "\"Radius\"", "]"}], 
         Typeset`allassumptions$$ = {{
          "type" -> "MultiClash", "word" -> "", "template" -> 
           "Assuming ${word1} is referring to ${desc1}. Use \"${word2}\" as \
${desc2}.", "count" -> "2", 
           "Values" -> {{
             "name" -> "Planet", "word" -> "earth", "desc" -> "a planet", 
              "input" -> "*MC.%7E-_*Planet-"}, {
             "name" -> "Unit", "word" -> "", "desc" -> "a unit", "input" -> 
              "*MC.%7E-_*Unit-"}}}}, Typeset`assumptions$$ = {}, 
         Typeset`open$$ = {1}, Typeset`querystate$$ = {
         "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
          0.6998368`7.2965417690488765, "Messages" -> {}}}, 
         DynamicBox[ToBoxes[
           AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
            Dynamic[Typeset`query$$], 
            Dynamic[Typeset`boxes$$], 
            Dynamic[Typeset`allassumptions$$], 
            Dynamic[Typeset`assumptions$$], 
            Dynamic[Typeset`open$$], 
            Dynamic[Typeset`querystate$$]], StandardForm],
          ImageSizeCache->{113., {9., 21.}},
          
          TrackedSymbols:>{
           Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
            Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
         DynamicModuleValues:>{},
         UndoTrackedVariables:>{Typeset`open$$}],
        BaseStyle->{"Deploy"},
        DeleteWithContents->True,
        Editable->False,
        SelectWithContents->True]}]}], ")"}]}], "//", 
   "UnitConvert"}]}]], "Input"],

Cell[BoxData[
 TemplateBox[{"2.3603639698415984`*^23",RowBox[{"\"kg\"", "\[ThinSpace]", 
     SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", "\"/\"", 
     "\[InvisibleSpace]", 
     SuperscriptBox["\"s\"", "2"]}],
   "kilogram meters squared per second squared",FractionBox[
    RowBox[{"\"Kilograms\"", " ", 
      SuperscriptBox["\"Meters\"", "2"]}], 
    SuperscriptBox["\"Seconds\"", "2"]]},
  "Quantity"]], "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["b)", "Section"],

Cell[CellGroupData[{

Cell["Radius of crater", "Subsection"],

Cell[TextData[{
 StyleBox["Equating thermal energy to KE and solving for radius a",
  FontWeight->"Bold"],
 "ssuming ideal gas law:"
}], "Text",
 FontWeight->"Bold"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"NSolve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      TemplateBox[{
       "2",RowBox[{"\"g\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
          SuperscriptBox["\"cm\"", "3"]}],"grams per centimeter cubed",
        FractionBox["\"Grams\"", 
         SuperscriptBox["\"Centimeters\"", "3"]]},
       "Quantity"], "\[Pi]", " ", 
      RowBox[{"r", "^", "2"}], " ", 
      RowBox[{
       TemplateBox[{"10","\"km\"","kilometers","\"Kilometers\""},
        "Quantity"], "/", 
       TemplateBox[{"30",SubscriptBox[
          StyleBox["\"m\"", Italic, StripOnInput -> False], 
          StyleBox["\"p\"", Plain, StripOnInput -> False]],"proton masses",
         "\"ProtonMass\""},
        "Quantity"]}], 
      RowBox[{"3", "/", "2"}], " ", 
      TemplateBox[{
       InterpretationBox["\[InvisibleSpace]", 1],StyleBox[
        "\"k\"", Italic, StripOnInput -> False],"Boltzmann constants",
        "\"BoltzmannConstant\""},
       "Quantity"], 
      TemplateBox[{"3500","\"K\"","kelvins","\"Kelvins\""},
       "Quantity"]}], "\[Equal]", "kE"}], ",", "r"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", "1"}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"r", "\[Rule]", 
  TemplateBox[{"50996.20439228616`","\"m\"","meters","\"Meters\""},
   "Quantity"]}]], "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["c)", "Section"],

Cell[CellGroupData[{

Cell["Number of impacts on Earth", "Subsection"],

Cell["Taking ratio of cross-sections:", "Text",
 FontWeight->"Bold"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nI", "=", 
  RowBox[{"10", "*", 
   RowBox[{
    RowBox[{
     NamespaceBox["LinguisticAssistant",
      DynamicModuleBox[{Typeset`query$$ = "earth radius", Typeset`boxes$$ = 
       RowBox[{
         TemplateBox[{"\"Earth\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
           "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
          "Entity"], "[", "\"Radius\"", "]"}], 
       Typeset`allassumptions$$ = {{
        "type" -> "MultiClash", "word" -> "", "template" -> 
         "Assuming ${word1} is referring to ${desc1}. Use \"${word2}\" as \
${desc2}.", "count" -> "2", 
         "Values" -> {{
           "name" -> "Planet", "word" -> "earth", "desc" -> "a planet", 
            "input" -> "*MC.%7E-_*Planet-"}, {
           "name" -> "Unit", "word" -> "", "desc" -> "a unit", "input" -> 
            "*MC.%7E-_*Unit-"}}}}, Typeset`assumptions$$ = {}, 
       Typeset`open$$ = {1}, Typeset`querystate$$ = {
       "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
        0.7038744`7.299040163641806, "Messages" -> {}}}, 
       DynamicBox[ToBoxes[
         AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
          Dynamic[Typeset`query$$], 
          Dynamic[Typeset`boxes$$], 
          Dynamic[Typeset`allassumptions$$], 
          Dynamic[Typeset`assumptions$$], 
          Dynamic[Typeset`open$$], 
          Dynamic[Typeset`querystate$$]], StandardForm],
        ImageSizeCache->{113., {9., 21.}},
        TrackedSymbols:>{
         Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
          Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
       DynamicModuleValues:>{},
       UndoTrackedVariables:>{Typeset`open$$}],
      BaseStyle->{"Deploy"},
      DeleteWithContents->True,
      Editable->False,
      SelectWithContents->True], "^", "2"}], "/", 
    RowBox[{
     NamespaceBox["LinguisticAssistant",
      DynamicModuleBox[{Typeset`query$$ = "moon radius", Typeset`boxes$$ = 
       RowBox[{
         TemplateBox[{"\"Moon\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PlanetaryMoon\"", ",", "\"Moon\""}], "]"}], 
           "\"Entity[\\\"PlanetaryMoon\\\", \\\"Moon\\\"]\"", 
           "\"planetary moon\""}, "Entity"], "[", "\"Radius\"", "]"}], 
       Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, 
       Typeset`open$$ = {1}, Typeset`querystate$$ = {
       "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
        0.7490228`7.326040031173382, "Messages" -> {}}}, 
       DynamicBox[ToBoxes[
         AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
          Dynamic[Typeset`query$$], 
          Dynamic[Typeset`boxes$$], 
          Dynamic[Typeset`allassumptions$$], 
          Dynamic[Typeset`assumptions$$], 
          Dynamic[Typeset`open$$], 
          Dynamic[Typeset`querystate$$]], StandardForm],
        ImageSizeCache->{116., {9., 21.}},
        TrackedSymbols:>{
         Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
          Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
       DynamicModuleValues:>{},
       UndoTrackedVariables:>{Typeset`open$$}],
      BaseStyle->{"Deploy"},
      DeleteWithContents->True,
      Editable->False,
      SelectWithContents->True], "^", "2"}]}]}]}]], "Input"],

Cell[BoxData["134.4518503338003291754`4.6985359268567"], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Mean time interval between impacts", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TemplateBox[{"3000","\"Myr\"","megayears","\"Megayears\""},
   "Quantity"], "/", "nI"}]], "Input"],

Cell[BoxData[
 TemplateBox[{
  "22.3128204822170404147`4.6985359268567","\"Myr\"","megayears",
   "\"Megayears\""},
  "Quantity"]], "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["d)", "Section"],

Cell[CellGroupData[{

Cell["Probability density function", "Subsection"],

Cell[TextData[StyleBox["Assuming uncertainty of 0.1 meter with dN/dm = \
const*m^-3:",
 FontWeight->"Bold"]], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sc", "=", 
  RowBox[{
   RowBox[{"NSolve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"const", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"4", "/", "3"}], "\[Pi]", " ", 
          TemplateBox[{"4",RowBox[{
              SuperscriptBox["\"km\"", "3"]}],"kilometers cubed",
            SuperscriptBox["\"Kilometers\"", "3"]},
           "Quantity"], 
          NamespaceBox["LinguisticAssistant",
           
           DynamicModuleBox[{Typeset`query$$ = "ice density", 
            Typeset`boxes$$ = TemplateBox[{"916.9", 
              
              RowBox[{"\"kg\"", "\[InvisibleSpace]", "\"/\"", 
                "\[InvisibleSpace]", 
                SuperscriptBox["\"m\"", "3"]}], "kilograms per meter cubed", 
              FractionBox["\"Kilograms\"", 
               SuperscriptBox["\"Meters\"", "3"]]}, "Quantity", SyntaxForm -> 
             Mod], Typeset`allassumptions$$ = {{
             "type" -> "Clash", "word" -> "ice", "template" -> 
              "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", 
              "count" -> "3", 
              "Values" -> {{
                "name" -> "Chemical", "desc" -> "a chemical compound", 
                 "input" -> "*C.ice-_*Chemical-"}, {
                "name" -> "Mineral", "desc" -> "a mineral", "input" -> 
                 "*C.ice-_*Mineral-"}, {
                "name" -> "FoodType", "desc" -> "a food type", "input" -> 
                 "*C.ice-_*FoodType-"}}}}, Typeset`assumptions$$ = {}, 
            Typeset`open$$ = {1}, Typeset`querystate$$ = {
            "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
             0.9214507`7.416017097792562, "query.jsp" -> 
             1.991296`7.7506808148552775, "Messages" -> {}}}, 
            DynamicBox[ToBoxes[
              AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
               Dynamic[Typeset`query$$], 
               Dynamic[Typeset`boxes$$], 
               Dynamic[Typeset`allassumptions$$], 
               Dynamic[Typeset`assumptions$$], 
               Dynamic[Typeset`open$$], 
               Dynamic[Typeset`querystate$$]], StandardForm],
             ImageSizeCache->{105., {9., 21.}},
             
             TrackedSymbols:>{
              Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
               Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
            DynamicModuleValues:>{},
            UndoTrackedVariables:>{Typeset`open$$}],
           BaseStyle->{"Deploy"},
           DeleteWithContents->True,
           Editable->False,
           SelectWithContents->True]}], ")"}], "^", 
        RowBox[{"-", "3"}]}], " ", 
       RowBox[{"(", 
        RowBox[{"4", "\[Pi]", " ", 
         TemplateBox[{"4",RowBox[{
             SuperscriptBox["\"km\"", "2"]}],"kilometers squared",
           SuperscriptBox["\"Kilometers\"", "2"]},
          "Quantity"], 
         NamespaceBox["LinguisticAssistant",
          
          DynamicModuleBox[{Typeset`query$$ = "ice density", Typeset`boxes$$ =
            TemplateBox[{"916.9", 
             
             RowBox[{"\"kg\"", "\[InvisibleSpace]", "\"/\"", 
               "\[InvisibleSpace]", 
               SuperscriptBox["\"m\"", "3"]}], "kilograms per meter cubed", 
             FractionBox["\"Kilograms\"", 
              SuperscriptBox["\"Meters\"", "3"]]}, "Quantity", SyntaxForm -> 
            Mod], Typeset`allassumptions$$ = {{
            "type" -> "Clash", "word" -> "ice", "template" -> 
             "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", 
             "count" -> "3", 
             "Values" -> {{
               "name" -> "Chemical", "desc" -> "a chemical compound", "input" -> 
                "*C.ice-_*Chemical-"}, {
               "name" -> "Mineral", "desc" -> "a mineral", "input" -> 
                "*C.ice-_*Mineral-"}, {
               "name" -> "FoodType", "desc" -> "a food type", "input" -> 
                "*C.ice-_*FoodType-"}}}}, Typeset`assumptions$$ = {}, 
           Typeset`open$$ = {1}, Typeset`querystate$$ = {
           "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
            0.9214507`7.416017097792562, "query.jsp" -> 
            1.991296`7.7506808148552775, "Messages" -> {}}}, 
           DynamicBox[ToBoxes[
             AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
              Dynamic[Typeset`query$$], 
              Dynamic[Typeset`boxes$$], 
              Dynamic[Typeset`allassumptions$$], 
              Dynamic[Typeset`assumptions$$], 
              Dynamic[Typeset`open$$], 
              Dynamic[Typeset`querystate$$]], StandardForm],
            ImageSizeCache->{105., {9., 21.}},
            
            TrackedSymbols:>{
             Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
              Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
           DynamicModuleValues:>{},
           UndoTrackedVariables:>{Typeset`open$$}],
          BaseStyle->{"Deploy"},
          DeleteWithContents->True,
          Editable->False,
          SelectWithContents->True], " ", 
         NamespaceBox["LinguisticAssistant",
          
          DynamicModuleBox[{Typeset`query$$ = ".1m", Typeset`boxes$$ = 
           TemplateBox[{"0.1", "\"m\"", "meters", "\"Meters\""}, "Quantity", 
            SyntaxForm -> Mod], 
           Typeset`allassumptions$$ = {{
            "type" -> "Clash", "word" -> "m", "template" -> 
             "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", 
             "count" -> "2", 
             "Values" -> {{
               "name" -> "Unit", "desc" -> "a unit", "input" -> 
                "*C.m-_*Unit-"}, {
               "name" -> "Variable", "desc" -> "a variable", "input" -> 
                "*C.m-_*Variable-"}}}, {
            "type" -> "Unit", "word" -> "m", "template" -> 
             "Assuming ${desc1} for \"${word}\". Use ${desc2} instead", 
             "count" -> "3", 
             "Values" -> {{
               "name" -> "Meters", "desc" -> "meters", "input" -> 
                "UnitClash_*m.*Meters--"}, {
               "name" -> "Minims", "desc" -> "US minims of volume", "input" -> 
                "UnitClash_*m.*Minims--"}, {
               "name" -> "Minutes", "desc" -> "minutes of time", "input" -> 
                "UnitClash_*m.*Minutes--"}}}}, Typeset`assumptions$$ = {}, 
           Typeset`open$$ = {1}, Typeset`querystate$$ = {
           "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
            0.5163733`7.164508771702191, "Messages" -> {}}}, 
           DynamicBox[ToBoxes[
             AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
              Dynamic[Typeset`query$$], 
              Dynamic[Typeset`boxes$$], 
              Dynamic[Typeset`allassumptions$$], 
              Dynamic[Typeset`assumptions$$], 
              Dynamic[Typeset`open$$], 
              Dynamic[Typeset`querystate$$]], StandardForm],
            ImageSizeCache->{53., {9., 21.}},
            
            TrackedSymbols:>{
             Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
              Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
           DynamicModuleValues:>{},
           UndoTrackedVariables:>{Typeset`open$$}],
          BaseStyle->{"Deploy"},
          DeleteWithContents->True,
          Editable->False,
          SelectWithContents->True]}], ")"}]}], "\[Equal]", "nI"}], ",", 
     "const"}], "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"1", ",", "1"}], "]"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"const", "\[Rule]", 
  TemplateBox[{"1.057758868839501`*^32",RowBox[{
      SuperscriptBox["\"kg\"", "2"]}],"kilograms squared",SuperscriptBox[
    "\"Kilograms\"", "2"]},
   "Quantity"]}]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Total mass of comets", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"4", " ", "\[Pi]", " ", 
     SuperscriptBox["r", "2"], " ", 
     NamespaceBox["LinguisticAssistant",
      DynamicModuleBox[{Typeset`query$$ = "ice density", Typeset`boxes$$ = 
       TemplateBox[{"916.9", 
         RowBox[{"\"kg\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
           SuperscriptBox["\"m\"", "3"]}], "kilograms per meter cubed", 
         FractionBox["\"Kilograms\"", 
          SuperscriptBox["\"Meters\"", "3"]]}, "Quantity", SyntaxForm -> Mod],
        Typeset`allassumptions$$ = {{
        "type" -> "Clash", "word" -> "ice", "template" -> 
         "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
         "3", "Values" -> {{
           "name" -> "Chemical", "desc" -> "a chemical compound", "input" -> 
            "*C.ice-_*Chemical-"}, {
           "name" -> "Mineral", "desc" -> "a mineral", "input" -> 
            "*C.ice-_*Mineral-"}, {
           "name" -> "FoodType", "desc" -> "a food type", "input" -> 
            "*C.ice-_*FoodType-"}}}}, Typeset`assumptions$$ = {}, 
       Typeset`open$$ = {1}, Typeset`querystate$$ = {
       "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
        0.9214507`7.416017097792562, "query.jsp" -> 
        1.991296`7.7506808148552775, "Messages" -> {}}}, 
       DynamicBox[ToBoxes[
         AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
          Dynamic[Typeset`query$$], 
          Dynamic[Typeset`boxes$$], 
          Dynamic[Typeset`allassumptions$$], 
          Dynamic[Typeset`assumptions$$], 
          Dynamic[Typeset`open$$], 
          Dynamic[Typeset`querystate$$]], StandardForm],
        ImageSizeCache->{105., {9., 21.}},
        TrackedSymbols:>{
         Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
          Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
       DynamicModuleValues:>{},
       UndoTrackedVariables:>{Typeset`open$$}],
      BaseStyle->{"Deploy"},
      DeleteWithContents->True,
      Editable->False,
      SelectWithContents->True], "const", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"4", "/", "3"}], "\[Pi]", " ", 
        RowBox[{"r", "^", "3"}], 
        NamespaceBox["LinguisticAssistant",
         DynamicModuleBox[{Typeset`query$$ = "ice density", Typeset`boxes$$ = 
          TemplateBox[{"916.9", 
            
            RowBox[{"\"kg\"", "\[InvisibleSpace]", "\"/\"", 
              "\[InvisibleSpace]", 
              SuperscriptBox["\"m\"", "3"]}], "kilograms per meter cubed", 
            FractionBox["\"Kilograms\"", 
             SuperscriptBox["\"Meters\"", "3"]]}, "Quantity", SyntaxForm -> 
           Mod], Typeset`allassumptions$$ = {{
           "type" -> "Clash", "word" -> "ice", "template" -> 
            "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", 
            "count" -> "3", 
            "Values" -> {{
              "name" -> "Chemical", "desc" -> "a chemical compound", "input" -> 
               "*C.ice-_*Chemical-"}, {
              "name" -> "Mineral", "desc" -> "a mineral", "input" -> 
               "*C.ice-_*Mineral-"}, {
              "name" -> "FoodType", "desc" -> "a food type", "input" -> 
               "*C.ice-_*FoodType-"}}}}, Typeset`assumptions$$ = {}, 
          Typeset`open$$ = {1}, Typeset`querystate$$ = {
          "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
           0.9214507`7.416017097792562, "query.jsp" -> 
           1.991296`7.7506808148552775, "Messages" -> {}}}, 
          DynamicBox[ToBoxes[
            AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
             Dynamic[Typeset`query$$], 
             Dynamic[Typeset`boxes$$], 
             Dynamic[Typeset`allassumptions$$], 
             Dynamic[Typeset`assumptions$$], 
             Dynamic[Typeset`open$$], 
             Dynamic[Typeset`querystate$$]], StandardForm],
           ImageSizeCache->{105., {9., 21.}},
           
           TrackedSymbols:>{
            Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
             Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
          DynamicModuleValues:>{},
          UndoTrackedVariables:>{Typeset`open$$}],
         BaseStyle->{"Deploy"},
         DeleteWithContents->True,
         Editable->False,
         SelectWithContents->True]}], ")"}], "^", 
      RowBox[{"-", "2"}]}]}], "/.", "sc"}], ",", 
   RowBox[{"{", 
    RowBox[{"r", ",", 
     TemplateBox[{"0.2","\"km\"","kilometers","\"Kilometers\""},
      "Quantity"], ",", 
     TemplateBox[{"4","\"km\"","kilometers","\"Kilometers\""},
      "Quantity"]}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 TemplateBox[{"3.4421660445050185`*^21","\"kg\"","kilograms","\"Kilograms\""},
  "Quantity"]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Total mass of water on Earth", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   NamespaceBox["LinguisticAssistant",
    DynamicModuleBox[{Typeset`query$$ = "surface area earth", 
     Typeset`boxes$$ = RowBox[{
       TemplateBox[{"\"Earth\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
         "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
        "Entity"], "[", "\"SurfaceArea\"", "]"}], 
     Typeset`allassumptions$$ = {{
      "type" -> "Clash", "word" -> "earth", "template" -> 
       "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
       "3", "Values" -> {{
         "name" -> "Planet", "desc" -> "a planet", "input" -> 
          "*C.earth-_*Planet-"}, {
         "name" -> "GeographicRegion", "desc" -> "a geographic region", 
          "input" -> "*C.earth-_*GeographicRegion-"}, {
         "name" -> "Country", "desc" -> "all countries", "input" -> 
          "*C.earth-_*Country-"}}}}, Typeset`assumptions$$ = {}, 
     Typeset`open$$ = {1}, Typeset`querystate$$ = {
     "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
      1.1691093`7.519400108736422, "Messages" -> {}}}, 
     DynamicBox[ToBoxes[
       AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
        Dynamic[Typeset`query$$], 
        Dynamic[Typeset`boxes$$], 
        Dynamic[Typeset`allassumptions$$], 
        Dynamic[Typeset`assumptions$$], 
        Dynamic[Typeset`open$$], 
        Dynamic[Typeset`querystate$$]], StandardForm],
      ImageSizeCache->{161., {9., 21.}},
      TrackedSymbols:>{
       Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
        Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
     DynamicModuleValues:>{},
     UndoTrackedVariables:>{Typeset`open$$}],
    BaseStyle->{"Deploy"},
    DeleteWithContents->True,
    Editable->False,
    SelectWithContents->True], "*", ".71", "*", 
   TemplateBox[{"3.7","\"km\"","kilometers","\"Kilometers\""},
    "Quantity"], "*", 
   NamespaceBox["LinguisticAssistant",
    DynamicModuleBox[{Typeset`query$$ = "water density", Typeset`boxes$$ = 
     RowBox[{
       TemplateBox[{"\"water\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Chemical\"", ",", "\"Water\""}], "]"}], 
         "\"Entity[\\\"Chemical\\\", \\\"Water\\\"]\"", "\"chemical\""}, 
        "Entity"], "[", 
       TemplateBox[{"\"density\"", 
         RowBox[{"EntityProperty", "[", 
           RowBox[{"\"Chemical\"", ",", "\"Density\""}], "]"}], 
         "\"EntityProperty[\\\"Chemical\\\", \\\"Density\\\"]\""}, 
        "EntityProperty"], "]"}], 
     Typeset`allassumptions$$ = {{
      "type" -> "Clash", "word" -> "water", "template" -> 
       "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
       "2", "Values" -> {{
         "name" -> "Chemical", "desc" -> "a chemical compound", "input" -> 
          "*C.water-_*Chemical-"}, {
         "name" -> "FoodType", "desc" -> "a food type", "input" -> 
          "*C.water-_*FoodType-"}}}}, Typeset`assumptions$$ = {}, 
     Typeset`open$$ = {1}, Typeset`querystate$$ = {
     "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
      0.8271731`7.369141396045259, "Messages" -> {}}}, 
     DynamicBox[ToBoxes[
       AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
        Dynamic[Typeset`query$$], 
        Dynamic[Typeset`boxes$$], 
        Dynamic[Typeset`allassumptions$$], 
        Dynamic[Typeset`assumptions$$], 
        Dynamic[Typeset`open$$], 
        Dynamic[Typeset`querystate$$]], StandardForm],
      ImageSizeCache->{123., {9., 21.}},
      TrackedSymbols:>{
       Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
        Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
     DynamicModuleValues:>{},
     UndoTrackedVariables:>{Typeset`open$$}],
    BaseStyle->{"Deploy"},
    DeleteWithContents->True,
    Editable->False,
    SelectWithContents->True]}], "//", "UnitConvert"}]], "Input"],

Cell[BoxData[
 TemplateBox[{"1.3399423882628432`*^21","\"kg\"","kilograms","\"Kilograms\""},
  "Quantity"]], "Output"]
}, Open  ]],

Cell[TextData[StyleBox["Therefore the total mass of comets landing on earth \
is comparable to the amount of water.",
 FontWeight->"Bold"]], "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1600, 827},
WindowMargins->{{-8, Automatic}, {Automatic, 0}},
PrintingCopies->1,
PrintingPageRange->{32000, 32000},
PrintingOptions->{"Magnification"->0.75,
"PaperOrientation"->"Portrait",
"PaperSize"->{612, 792},
"PrintingMargins"->{{28.8, 28.8}, {44.64, 44.64}}},
Magnification:>1.3 Inherited,
FrontEndVersion->"11.1 for Microsoft Windows (64-bit) (October 14, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 310, 11, 160, "Title"],
Cell[893, 35, 328, 10, 104, "Chapter"],
Cell[CellGroupData[{
Cell[1246, 49, 22, 0, 78, "Chapter"],
Cell[1271, 51, 134401, 2207, 299, "DisplayFormula"],
Cell[CellGroupData[{
Cell[135697, 2262, 21, 0, 81, "Section"],
Cell[CellGroupData[{
Cell[135743, 2266, 38, 0, 57, "Subsection"],
Cell[135784, 2268, 88, 1, 39, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[135909, 2274, 32, 0, 57, "Subsection"],
Cell[135944, 2276, 93, 1, 39, "Text"],
Cell[CellGroupData[{
Cell[136062, 2281, 314, 11, 39, "Input"],
Cell[136379, 2294, 250, 9, 72, "Output"]
}, Open  ]],
Cell[136644, 2306, 98, 1, 39, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[136791, 2313, 21, 0, 81, "Section"],
Cell[CellGroupData[{
Cell[136837, 2317, 39, 0, 57, "Subsection"],
Cell[136879, 2319, 141, 2, 39, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[137057, 2326, 45, 0, 57, "Subsection"],
Cell[137105, 2328, 86, 1, 39, "Text"],
Cell[CellGroupData[{
Cell[137216, 2333, 602, 19, 39, "Input"],
Cell[137821, 2354, 73, 2, 57, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[137955, 2363, 21, 0, 81, "Section"],
Cell[CellGroupData[{
Cell[138001, 2367, 38, 0, 57, "Subsection"],
Cell[138042, 2369, 90, 1, 39, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[138169, 2375, 82, 1, 57, "Subsection"],
Cell[CellGroupData[{
Cell[138276, 2380, 787, 21, 56, "Input"],
Cell[139066, 2403, 198, 4, 49, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[139313, 2413, 36, 0, 57, "Subsection"],
Cell[139352, 2415, 120, 2, 39, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[139509, 2422, 32, 0, 57, "Subsection"],
Cell[139544, 2424, 97, 1, 39, "Text"],
Cell[CellGroupData[{
Cell[139666, 2429, 881, 24, 49, "Input"],
Cell[140550, 2455, 134, 3, 47, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[140733, 2464, 34, 0, 57, "Subsection"],
Cell[140770, 2466, 93, 1, 39, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[140900, 2472, 38, 0, 57, "Subsection"],
Cell[140941, 2474, 117, 2, 39, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[141095, 2481, 38, 0, 57, "Subsection"],
Cell[141136, 2483, 84, 1, 39, "Text"],
Cell[CellGroupData[{
Cell[141245, 2488, 1225, 38, 69, "Input"],
Cell[142473, 2528, 45, 0, 39, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[142567, 2534, 39, 0, 57, "Subsection"],
Cell[CellGroupData[{
Cell[142631, 2538, 410, 10, 58, "Input"],
Cell[143044, 2550, 45, 0, 39, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[143138, 2556, 36, 0, 57, "Subsection"],
Cell[CellGroupData[{
Cell[143199, 2560, 1226, 33, 49, "Input"],
Cell[144428, 2595, 196, 4, 49, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[144673, 2605, 43, 0, 57, "Subsection"],
Cell[CellGroupData[{
Cell[144741, 2609, 528, 14, 55, "Input"],
Cell[145272, 2625, 291, 7, 54, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[145612, 2638, 43, 0, 57, "Subsection"],
Cell[145658, 2640, 101, 1, 39, "Text"],
Cell[CellGroupData[{
Cell[145784, 2645, 1339, 36, 56, "Input"],
Cell[147126, 2683, 140, 3, 47, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[147339, 2694, 22, 0, 93, "Chapter"],
Cell[CellGroupData[{
Cell[147386, 2698, 21, 0, 81, "Section"],
Cell[CellGroupData[{
Cell[147432, 2702, 55, 0, 57, "Subsection"],
Cell[CellGroupData[{
Cell[147512, 2706, 777, 24, 62, "Input"],
Cell[148292, 2732, 211, 6, 64, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[148564, 2745, 21, 0, 81, "Section"],
Cell[CellGroupData[{
Cell[148610, 2749, 134, 3, 61, "Subsection"],
Cell[148747, 2754, 260, 3, 64, "Text"],
Cell[149010, 2759, 385, 13, 39, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[149432, 2777, 133, 3, 61, "Subsection"],
Cell[149568, 2782, 176, 2, 39, "Text"],
Cell[149747, 2786, 374, 13, 39, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[150158, 2804, 44, 0, 57, "Subsection"],
Cell[CellGroupData[{
Cell[150227, 2808, 308, 11, 39, "Input"],
Cell[150538, 2821, 98, 3, 43, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[150685, 2830, 157, 6, 61, "Subsection"],
Cell[CellGroupData[{
Cell[150867, 2840, 328, 11, 39, "Input"],
Cell[151198, 2853, 727, 21, 43, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[151974, 2880, 63, 0, 57, "Subsection"],
Cell[CellGroupData[{
Cell[152062, 2884, 1096, 31, 65, "Input"],
Cell[153161, 2917, 578, 18, 68, "Output"]
}, Open  ]],
Cell[153754, 2938, 90, 1, 39, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[153905, 2946, 22, 0, 93, "Chapter"],
Cell[CellGroupData[{
Cell[153952, 2950, 45, 0, 57, "Subsection"],
Cell[CellGroupData[{
Cell[154022, 2954, 705, 18, 58, "Input"],
Cell[154730, 2974, 544, 13, 91, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[155323, 2993, 64, 0, 57, "Subsection"],
Cell[CellGroupData[{
Cell[155412, 2997, 4284, 92, 53, "Input"],
Cell[159699, 3091, 115, 2, 49, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[159875, 3100, 22, 0, 93, "Chapter"],
Cell[CellGroupData[{
Cell[159922, 3104, 21, 0, 81, "Section"],
Cell[CellGroupData[{
Cell[159968, 3108, 50, 0, 57, "Subsection"],
Cell[160021, 3110, 132, 2, 39, "Text"],
Cell[CellGroupData[{
Cell[160178, 3116, 594, 18, 49, "Input"],
Cell[160775, 3136, 503, 11, 83, "Output"]
}, Open  ]],
Cell[161293, 3150, 118, 2, 39, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[161460, 3158, 21, 0, 81, "Section"],
Cell[CellGroupData[{
Cell[161506, 3162, 42, 0, 57, "Subsection"],
Cell[161551, 3164, 104, 1, 39, "Text"],
Cell[CellGroupData[{
Cell[161680, 3169, 692, 19, 52, "Input"],
Cell[162375, 3190, 441, 11, 52, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[162865, 3207, 50, 0, 57, "Subsection"],
Cell[162918, 3209, 87, 1, 39, "Text"],
Cell[CellGroupData[{
Cell[163030, 3214, 509, 15, 46, "Input"],
Cell[163542, 3231, 686, 20, 92, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[164289, 3258, 21, 0, 81, "Section"],
Cell[CellGroupData[{
Cell[164335, 3262, 56, 0, 57, "Subsection"],
Cell[CellGroupData[{
Cell[164416, 3266, 519, 14, 49, "Input"],
Cell[164938, 3282, 160, 5, 41, "Output"]
}, Open  ]],
Cell[165113, 3290, 137, 2, 39, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[165311, 3299, 22, 0, 93, "Chapter"],
Cell[CellGroupData[{
Cell[165358, 3303, 21, 0, 81, "Section"],
Cell[CellGroupData[{
Cell[165404, 3307, 36, 0, 57, "Subsection"],
Cell[165443, 3309, 101, 1, 39, "Text"],
Cell[CellGroupData[{
Cell[165569, 3314, 9180, 196, 53, "Input"],
Cell[174752, 3512, 431, 9, 54, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[175244, 3528, 21, 0, 81, "Section"],
Cell[CellGroupData[{
Cell[175290, 3532, 38, 0, 57, "Subsection"],
Cell[175331, 3534, 165, 5, 39, "Text"],
Cell[CellGroupData[{
Cell[175521, 3543, 1190, 30, 56, "Input"],
Cell[176714, 3575, 136, 3, 47, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[176911, 3585, 21, 0, 81, "Section"],
Cell[CellGroupData[{
Cell[176957, 3589, 48, 0, 57, "Subsection"],
Cell[177008, 3591, 68, 1, 39, "Text"],
Cell[CellGroupData[{
Cell[177101, 3596, 3358, 73, 53, "Input"],
Cell[180462, 3671, 66, 0, 39, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[180577, 3677, 56, 0, 57, "Subsection"],
Cell[CellGroupData[{
Cell[180658, 3681, 124, 3, 49, "Input"],
Cell[180785, 3686, 141, 4, 49, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[180987, 3697, 21, 0, 81, "Section"],
Cell[CellGroupData[{
Cell[181033, 3701, 50, 0, 57, "Subsection"],
Cell[181086, 3703, 117, 2, 39, "Text"],
Cell[CellGroupData[{
Cell[181228, 3709, 7572, 158, 58, "Input"],
Cell[188803, 3869, 223, 5, 54, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[189075, 3880, 42, 0, 57, "Subsection"],
Cell[CellGroupData[{
Cell[189142, 3884, 4697, 99, 53, "Input"],
Cell[193842, 3985, 118, 2, 54, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[194009, 3993, 50, 0, 57, "Subsection"],
Cell[CellGroupData[{
Cell[194084, 3997, 3957, 85, 51, "Input"],
Cell[198044, 4084, 118, 2, 54, "Output"]
}, Open  ]],
Cell[198177, 4089, 148, 2, 39, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

